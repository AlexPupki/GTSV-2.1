import React, { useState, useEffect } from "react";
import { useNavigation } from "./hooks/useNavigation";
import { GTSPageRouter } from "./components/pages/GTSPageRouter";
import { AuthProvider } from "./contexts/AuthContext";
import { GTSDemoRouter } from "./components/core/GTSDemoRouter";
import { AINavigationHelper } from "./utils/ai-navigation-map";
import { SimpleAppTest } from "./components/test/SimpleAppTest";
import { SimpleFallback } from "./components/fallback/SimpleFallback";

// üö® ARCHITECTURE VIOLATIONS - rules.json compliance issues:
// ‚ùå 1. NOT Server Component (should be RSC by default)
// ‚ùå 2. Direct DOM manipulations (lines 25-33)
// ‚ùå 3. Multiple responsibilities (SRP violation)
// ‚ùå 4. No Error Boundary at page level
// ‚ùå 5. Client-side only routing
// ‚ùå 6. No public API imports (should be @/pages, @/shared)
// ‚ùå 7. No CSP headers configuration
// ‚ùå 8. Theme manipulation through DOM instead of proper provider

export default function App() {
  const [isLoaded, setIsLoaded] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const {
    currentPage,
    navigationContext,
    userRole,
    setCurrentPage,
    navigateToModule,
    handleRoleSelected,
    goToHome,
    goToLogin
  } = useNavigation();

  // ‚ùå CRITICAL VIOLATION: Direct DOM manipulation in React
  // rules.json requirement: "–±–µ–∑ DOM –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ React"
  useEffect(() => {
    try {
      setIsLoaded(true);
      // ‚ùå BAD: Direct DOM access - should use React state/refs
      if (typeof document !== 'undefined') {
        const loading = document.getElementById('loading');
        if (loading) {
          loading.style.display = 'none'; // ‚ùå Direct style manipulation
        }
        document.body.classList.add('loaded'); // ‚ùå Direct class manipulation
      }
    } catch (err) {
      console.error('App initialization error:', err);
      setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
  }, []);

  // ‚ùå ARCHITECTURAL VIOLATION: Business logic in App component
  // rules.json: "SRP/SoC: –æ–¥–∏–Ω –º–æ–¥—É–ª—å ‚Äî –æ–¥–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"
  const isAdminPage = React.useMemo(() => {
    const adminPages = [
      'executive-access',
      'partner-portal',
      'client-club-portal',
      'b2b-client-portal',
      'crew-app',
      'demo-center',
      'ui-kit'
    ];
    return adminPages.includes(currentPage);
  }, [currentPage]);

  // ‚ùå CRITICAL: Direct DOM manipulation for theming
  // rules.json: "themes: data-theme + CSS variables (–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤)"
  // Should use: <ThemeProvider attribute="class" defaultTheme="dark">
  React.useEffect(() => {
    if (isAdminPage) {
      document.documentElement.classList.add('dark'); // ‚ùå Should use ThemeProvider
    } else {
      document.documentElement.classList.remove('dark'); // ‚ùå Should use ThemeProvider
    }
    
    return () => {
      // Cleanup on unmount
      document.documentElement.classList.remove('dark'); // ‚ùå Manual cleanup needed
    };
  }, [isAdminPage]);

  // ‚ùå SRP VIOLATION: Navigation logic should be in separate module
  // rules.json: "features: —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —é–∑–∫–µ–π—Å—ã"
  // Should be: import { useNavigation } from "@/features/navigation"
  const handleNavigateToUIKit = () => setCurrentPage("ui-kit");
  const handleNavigateToDemo = () => setCurrentPage("demo");
  const handleNavigateToSphereM = () => setCurrentPage("sphere-management");
  const handleNavigateToB2BPortal = () => setCurrentPage("b2b-client-portal");
  const handleNavigateToNewLeadDemo = () => setCurrentPage("new-lead-demo");

  // üéØ AI-Powered Demo Navigation
  const handleNavigateToDemoById = (demoId: string) => {
    console.log(`ü§ñ AI Navigation: Navigating to demo "${demoId}"`);
    
    // Find component info using AI helper
    const componentInfo = AINavigationHelper.findComponent(demoId);
    console.log(`üîç Found ${componentInfo.length} matching components for "${demoId}"`);
    
    // Map demo IDs to page routes
    const demoRoutes: Record<string, string> = {
      'executive-panel': 'executive-access',
      'crm-system': 'executive-access',
      'finance-system': 'executive-access', 
      'client-club': 'client-club-portal',
      'partner-portal': 'partner-portal',
      'b2b-portal': 'b2b-client-portal',
      'ai-assistant': 'executive-access',
      'ai-content': 'executive-access',
      'crew-app': 'crew-app',
      'booking-system': 'executive-access',
      'iam-system': 'executive-access'
    };

    const targetPage = demoRoutes[demoId] || 'demo';
    setCurrentPage(targetPage);
  };

  // ‚ùå INCOMPLETE ERROR BOUNDARY: Should be proper React Error Boundary
  // rules.json: "ErrorBoundary –Ω–∞ —É—Ä–æ–≤–Ω–µ pages/widgets"
  // Current: Simple conditional render, not catching React errors
  if (error) {
    return (
      <SimpleFallback 
        message={error}
        retry={() => {
          setError(null);
          setIsLoaded(false);
          window.location.reload(); // ‚ùå Force reload instead of proper error recovery
        }}
      />
    );
  }

  // Show loading until component is ready
  if (!isLoaded) {
    return null;
  }

  try {
    // ‚ùå ROUTING VIOLATION: Client-side routing instead of App Router
    // rules.json: "next_app_router: layout/loading/error —Å–µ–≥–º–µ–Ω—Ç—ã"
    if (currentPage === "demo-center") {
      return (
        <AuthProvider>
          <GTSDemoRouter
            onNavigateToDemo={handleNavigateToDemoById}
            currentDemo={currentPage}
          />
        </AuthProvider>
      );
    }

    return (
      <AuthProvider>
        <SimpleAppTest /> {/* ‚ùå Test component in production App */}
        <GTSPageRouter
          currentPage={currentPage}
          navigationContext={navigationContext}
          onRoleSelected={handleRoleSelected}
          onBackToHome={goToHome}
          onLogin={goToLogin}
          onNavigateToUIKit={handleNavigateToUIKit}
          onNavigateToDemo={handleNavigateToDemo}
          navigateToModule={navigateToModule}
          onNavigateToB2BPortal={handleNavigateToB2BPortal}
          onNavigateToNewLeadDemo={handleNavigateToNewLeadDemo}
          // ‚ùå Too many props - component has too much responsibility
          onNavigateToDemoById={handleNavigateToDemoById}
        />
      </AuthProvider>
    );
  } catch (err) {
    console.error('Render error:', err);
    setError('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
    return null; // ‚ùå Should render error UI, not null
  }
}