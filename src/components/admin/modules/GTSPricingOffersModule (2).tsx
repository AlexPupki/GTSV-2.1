// üí∞ GTS Pricing & Offers Module - –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ v2025-09-17
import React, { useState, useEffect, useMemo } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "../../ui/card";
import { Button } from "../../ui/button";
import { Badge } from "../../ui/badge";
import { Input } from "../../ui/input";
import { Label } from "../../ui/label";
import { Textarea } from "../../ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../../ui/tabs";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "../../ui/table";
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuTrigger, 
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuLabel 
} from "../../ui/dropdown-menu";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "../../ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../../ui/select";
import { Checkbox } from "../../ui/checkbox";
import { Progress } from "../../ui/progress";
import { Separator } from "../../ui/separator";
import { Alert, AlertDescription } from "../../ui/alert";
import { ScrollArea } from "../../ui/scroll-area";
import { toast } from "sonner@2.0.3";
import { 
  // Core Icons
  DollarSign, Percent, Gift, Package, Calendar, AlertTriangle,
  Star, Target, ArrowUpRight, Activity, CheckCircle, Bell,
  
  // Action Icons
  Search, Filter, Plus, MoreHorizontal, Command, 
  ChevronDown, ChevronRight, ExternalLink, Download, Upload,
  Edit3, Copy, Trash2, Eye, EyeOff, RefreshCw, Save,
  
  // Status Icons
  Play, Pause, Square, RotateCcw, Ban, CheckCircle2, XCircle,
  Timer, Navigation, MessageSquare, Phone, Settings,
  
  // Pricing specific
  Calculator, Tag, TrendingUp, TrendingDown, BarChart3,
  Zap, Clock, Users, CreditCard, ShoppingCart,
  
  // Offer specific
  Sparkles, Flame, Crown, Gem, Award, Heart,
  Calendar as CalendarIcon, MapPin, Building,
  
  // Navigation
  ArrowLeft, ArrowRight, Home, Layers, FileText
} from "lucide-react";

// üéØ –¢–ò–ü–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°–´

type PriceListStatus = 'draft' | 'published' | 'archived';
type OfferStatus = 'planned' | 'active' | 'expired' | 'paused' | 'cancelled';
type OfferType = 'discount' | 'bonus' | 'bundle' | 'freebie' | 'upgrade';
type DiscountType = 'percentage' | 'fixed' | 'buy_x_get_y' | 'tiered';
type Channel = 'website' | 'mobile_app' | 'call_center' | 'partner' | 'b2b' | 'crm';
type Season = 'winter' | 'spring' | 'summer' | 'autumn' | 'year_round';
type Segment = 'premium' | 'standard' | 'budget' | 'vip' | 'corporate' | 'first_time';
type Currency = 'RUB' | 'USD' | 'EUR';

interface PriceRule {
  id: string;
  serviceId: string;
  serviceName: string;
  category: string;
  basePrice: number;
  
  // –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
  minDuration?: number;        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã)
  maxDuration?: number;        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  minGroupSize?: number;       // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã
  maxGroupSize?: number;       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã
  weekdays?: number[];         // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (0-6)
  timeSlots?: string[];        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
  validFrom?: string;          // –î–µ–π—Å—Ç–≤—É–µ—Ç —Å
  validTo?: string;            // –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ
  
  // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ü–µ–Ω—ã
  seasonMultiplier?: number;   // –°–µ–∑–æ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
  weekendMultiplier?: number;  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö
  groupDiscountRules?: {       // –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–∫–∏–¥–∫–∏
    minSize: number;
    discount: number;
  }[];
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
  addOns?: {
    id: string;
    name: string;
    price: number;
    required: boolean;
  }[];
  
  isActive: boolean;
}

interface PriceList {
  id: string;
  name: string;
  description?: string;
  season: Season;
  channel: Channel;
  segment: Segment;
  currency: Currency;
  
  rules: PriceRule[];
  
  // –í–µ—Ä—Å–∏–æ–Ω–Ω–æ—Å—Ç—å
  version: number;
  parentId?: string;           // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –≤–µ—Ä—Å–∏—é
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  status: PriceListStatus;
  validFrom: string;
  validTo?: string;
  
  // –ê—É–¥–∏—Ç
  createdBy: string;
  createdAt: string;
  publishedBy?: string;
  publishedAt?: string;
  updatedAt: string;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  bookingsCount?: number;      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  totalRevenue?: number;       // –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
  avgOrderValue?: number;      // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
}

interface Offer {
  id: string;
  name: string;
  description: string;
  type: OfferType;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∏–¥–∫–∏
  discountType: DiscountType;
  discountValue: number;       // –ó–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ (% –∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞)
  maxDiscountAmount?: number;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–∫–∏–¥–∫–∏
  
  // –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
  minOrderAmount?: number;     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
  maxUsageCount?: number;      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
  maxUsagePerUser?: number;    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  // –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å
  applicableServices: string[]; // ID –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö —É—Å–ª—É–≥
  applicableChannels: Channel[]; // –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã
  applicableSegments: Segment[]; // –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
  validFrom: string;
  validTo: string;
  
  // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º–æ—Å—Ç—å
  combinableWithOthers: boolean; // –ú–æ–∂–Ω–æ –ª–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ü–∏—è–º–∏
  priority: number;            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (1-10)
  
  // –ü—Ä–æ–º–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
  imageUrl?: string;
  bannerText?: string;
  terms?: string;
  previewLink?: string;
  
  // –°—Ç–∞—Ç—É—Å –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  status: OfferStatus;
  createdBy: string;
  createdAt: string;
  activatedAt?: string;
  deactivatedAt?: string;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  usageCount: number;          // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
  revenue: number;             // –í—ã—Ä—É—á–∫–∞ –ø–æ –∞–∫—Ü–∏–∏
  conversionRate?: number;     // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
}

interface PromoCode {
  id: string;
  code: string;                // –ü—Ä–æ–º–æ-–∫–æ–¥
  offerId: string;             // –°–≤—è–∑–∞–Ω–Ω–∞—è –∞–∫—Ü–∏—è
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  maxUses?: number;            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
  usedCount: number;           // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
  
  // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
  assignedUserIds?: string[];  // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
  oneTimeUse: boolean;         // –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
  
  // –°—Ç–∞—Ç—É—Å
  isActive: boolean;
  createdAt: string;
  lastUsedAt?: string;
}

interface Bundle {
  id: string;
  name: string;
  description: string;
  
  // –°–æ—Å—Ç–∞–≤ –ø–∞–∫–µ—Ç–∞
  services: {
    serviceId: string;
    serviceName: string;
    quantity: number;
    originalPrice: number;
  }[];
  
  // –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
  originalTotalPrice: number;  // –°—É–º–º–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏
  bundlePrice: number;         // –¶–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞
  savings: number;             // –≠–∫–æ–Ω–æ–º–∏—è
  discountPercentage: number;  // –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  minAdvanceBooking?: number;  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ (–¥–Ω–∏)
  validityPeriod?: number;     // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞–∫–µ—Ç–∞ (–¥–Ω–∏)
  transferable: boolean;       // –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –¥—Ä—É–≥–æ–º—É –ª–∏—Ü—É
  
  // –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å
  applicableChannels: Channel[];
  applicableSegments: Segment[];
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
  validFrom: string;
  validTo: string;
  
  // –°—Ç–∞—Ç—É—Å
  isActive: boolean;
  createdBy: string;
  createdAt: string;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  salesCount: number;
  totalRevenue: number;
}

interface PriceConflict {
  id: string;
  type: 'overlap' | 'gap' | 'inconsistency';
  severity: 'low' | 'medium' | 'high';
  description: string;
  affectedRules: string[];
  suggestedFix?: string;
}

interface PriceSimulation {
  serviceId: string;
  serviceName: string;
  duration: number;
  groupSize: number;
  date: string;
  channel: Channel;
  segment: Segment;
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
  basePrice: number;
  appliedModifiers: {
    name: string;
    multiplier: number;
    amount: number;
  }[];
  finalPrice: number;
  
  // –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –∞–∫—Ü–∏–∏
  applicableOffers: {
    offerId: string;
    offerName: string;
    discountAmount: number;
    finalPriceWithOffer: number;
  }[];
}

// üéØ –ú–û–ö –î–ê–ù–ù–´–ï

const mockServices = [
  { id: 'SVC-001', name: '–ë–∞–≥–≥–∏-—Ç—É—Ä –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞', category: 'Extreme' },
  { id: 'SVC-002', name: '–í–µ—Ä—Ç–æ–ª–µ—Ç–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è', category: 'Premium' },
  { id: 'SVC-003', name: '–Ø—Ö—Ç–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞', category: 'Premium' },
  { id: 'SVC-004', name: '–ö–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã –≤ –≥–æ—Ä–∞—Ö', category: 'Extreme' },
  { id: 'SVC-005', name: '–î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç—É—Ä', category: 'Cultural' },
  { id: 'SVC-006', name: '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ', category: 'Cultural' }
];

const mockPriceLists: PriceList[] = [
  {
    id: 'PL-2025S',
    name: '–õ–µ—Ç–Ω–∏–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç 2025',
    description: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –Ω–∞ –ª–µ—Ç–Ω–∏–π —Å–µ–∑–æ–Ω',
    season: 'summer',
    channel: 'website',
    segment: 'standard',
    currency: 'RUB',
    version: 2,
    parentId: 'PL-2025S-V1',
    
    rules: [
      {
        id: 'PR-001',
        serviceId: 'SVC-001',
        serviceName: '–ë–∞–≥–≥–∏-—Ç—É—Ä –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞',
        category: 'Extreme',
        basePrice: 8500,
        minDuration: 2,
        maxDuration: 6,
        minGroupSize: 2,
        maxGroupSize: 8,
        weekdays: [1, 2, 3, 4, 5, 6, 0],
        timeSlots: ['09:00', '14:00', '17:00'],
        seasonMultiplier: 1.2,
        weekendMultiplier: 1.15,
        groupDiscountRules: [
          { minSize: 4, discount: 0.05 },
          { minSize: 6, discount: 0.10 },
          { minSize: 8, discount: 0.15 }
        ],
        addOns: [
          { id: 'AO-001', name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∞', price: 3000, required: false },
          { id: 'AO-002', name: '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ —ç–∫—Å—Ç—Ä–∏–º', price: 500, required: true }
        ],
        isActive: true
      },
      {
        id: 'PR-002',
        serviceId: 'SVC-002',
        serviceName: '–í–µ—Ä—Ç–æ–ª–µ—Ç–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è',
        category: 'Premium',
        basePrice: 45000,
        minDuration: 1,
        maxDuration: 3,
        minGroupSize: 1,
        maxGroupSize: 6,
        weekdays: [1, 2, 3, 4, 5, 6, 0],
        timeSlots: ['10:00', '13:00', '16:00'],
        seasonMultiplier: 1.0,
        weekendMultiplier: 1.1,
        addOns: [
          { id: 'AO-003', name: 'VIP —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä', price: 8000, required: false },
          { id: 'AO-004', name: '–®–∞–º–ø–∞–Ω—Å–∫–æ–µ –Ω–∞ –±–æ—Ä—Ç—É', price: 5000, required: false }
        ],
        isActive: true
      },
      {
        id: 'PR-003',
        serviceId: 'SVC-003',
        serviceName: '–Ø—Ö—Ç–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞',
        category: 'Premium',
        basePrice: 25000,
        minDuration: 3,
        maxDuration: 8,
        minGroupSize: 2,
        maxGroupSize: 12,
        weekdays: [1, 2, 3, 4, 5, 6, 0],
        seasonMultiplier: 1.1,
        weekendMultiplier: 1.2,
        groupDiscountRules: [
          { minSize: 6, discount: 0.05 },
          { minSize: 10, discount: 0.12 }
        ],
        isActive: true
      }
    ],
    
    status: 'published',
    validFrom: '2025-06-01T00:00:00Z',
    validTo: '2025-08-31T23:59:59Z',
    
    createdBy: 'user:pricing-mgr',
    createdAt: '2025-05-15T10:00:00Z',
    publishedBy: 'user:exec-1',
    publishedAt: '2025-05-20T14:30:00Z',
    updatedAt: '2025-09-15T16:45:00Z',
    
    bookingsCount: 1247,
    totalRevenue: 18650000,
    avgOrderValue: 14960
  },
  {
    id: 'PL-2025A',
    name: '–û—Å–µ–Ω–Ω–∏–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç 2025',
    description: '–¢–∞—Ä–∏—Ñ—ã –Ω–∞ –æ—Å–µ–Ω–Ω–∏–π —Å–µ–∑–æ–Ω —Å —É—á–µ—Ç–æ–º –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π',
    season: 'autumn',
    channel: 'website',
    segment: 'standard',
    currency: 'RUB',
    version: 1,
    
    rules: [
      {
        id: 'PR-004',
        serviceId: 'SVC-001',
        serviceName: '–ë–∞–≥–≥–∏-—Ç—É—Ä –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞',
        category: 'Extreme',
        basePrice: 7500,
        minDuration: 2,
        maxDuration: 6,
        seasonMultiplier: 0.9,
        weekendMultiplier: 1.1,
        isActive: true
      },
      {
        id: 'PR-005',
        serviceId: 'SVC-005',
        serviceName: '–î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç—É—Ä',
        category: 'Cultural',
        basePrice: 4500,
        minDuration: 3,
        maxDuration: 5,
        seasonMultiplier: 1.15, // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å –æ—Å–µ–Ω—å—é
        isActive: true
      }
    ],
    
    status: 'draft',
    validFrom: '2025-09-01T00:00:00Z',
    validTo: '2025-11-30T23:59:59Z',
    
    createdBy: 'user:pricing-mgr',
    createdAt: '2025-08-20T11:00:00Z',
    updatedAt: '2025-09-17T09:30:00Z'
  }
];

const mockOffers: Offer[] = [
  {
    id: 'OFF-001',
    name: '–†–∞–Ω–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ -15%',
    description: '–°–∫–∏–¥–∫–∞ 15% –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞ 30 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏',
    type: 'discount',
    discountType: 'percentage',
    discountValue: 15,
    
    minOrderAmount: 10000,
    maxUsagePerUser: 2,
    
    applicableServices: ['SVC-001', 'SVC-002', 'SVC-003'],
    applicableChannels: ['website', 'mobile_app'],
    applicableSegments: ['standard', 'premium'],
    
    validFrom: '2025-06-01T00:00:00Z',
    validTo: '2025-08-31T23:59:59Z',
    
    combinableWithOthers: false,
    priority: 8,
    
    bannerText: 'üéØ –ü–ª–∞–Ω–∏—Ä—É–π –∑–∞—Ä–∞–Ω–µ–µ –∏ —ç–∫–æ–Ω–æ–º—å!',
    terms: '–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 30 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏. –ù–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ü–∏—è–º–∏.',
    previewLink: '/offers/early-booking',
    
    status: 'active',
    createdBy: 'user:marketing-mgr',
    createdAt: '2025-05-10T14:00:00Z',
    activatedAt: '2025-06-01T00:00:00Z',
    
    usageCount: 89,
    revenue: 875000,
    conversionRate: 12.3
  },
  {
    id: 'OFF-002',
    name: '–ü–µ—Ä–≤—ã–π —Ä–∞–∑ —Å–æ —Å–∫–∏–¥–∫–æ–π',
    description: '–°–∫–∏–¥–∫–∞ 20% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
    type: 'discount',
    discountType: 'percentage',
    discountValue: 20,
    maxDiscountAmount: 5000,
    
    applicableServices: ['SVC-001', 'SVC-004', 'SVC-005'],
    applicableChannels: ['website', 'mobile_app', 'call_center'],
    applicableSegments: ['first_time'],
    
    validFrom: '2025-01-01T00:00:00Z',
    validTo: '2025-12-31T23:59:59Z',
    
    combinableWithOthers: true,
    priority: 9,
    
    bannerText: 'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GTS!',
    terms: '–°–∫–∏–¥–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—Ä–æ–Ω–∏—Ä—É—é—Ç –≤–ø–µ—Ä–≤—ã–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 5000 —Ä—É–±.',
    
    status: 'active',
    createdBy: 'user:marketing-mgr',
    createdAt: '2025-01-15T10:00:00Z',
    activatedAt: '2025-01-01T00:00:00Z',
    
    usageCount: 234,
    revenue: 1250000,
    conversionRate: 18.7
  },
  {
    id: 'OFF-003',
    name: '–ú–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ 2x1',
    description: '–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –¥–≤—É—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π —Ç—Ä–µ—Ç—å—è –≤ –ø–æ–¥–∞—Ä–æ–∫',
    type: 'bonus',
    discountType: 'buy_x_get_y',
    discountValue: 100, // 100% —Å–∫–∏–¥–∫–∞ –Ω–∞ —Ç—Ä–µ—Ç—å—é —É—Å–ª—É–≥—É
    
    applicableServices: ['SVC-001', 'SVC-004', 'SVC-005', 'SVC-006'],
    applicableChannels: ['website', 'mobile_app'],
    applicableSegments: ['standard', 'premium'],
    
    validFrom: '2025-05-01T00:00:00Z',
    validTo: '2025-05-12T23:59:59Z',
    
    combinableWithOthers: false,
    priority: 10,
    
    bannerText: 'üéä –ú–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏: 2+1 –≤ –ø–æ–¥–∞—Ä–æ–∫!',
    terms: '–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –¥–≤—É—Ö –ª—é–±—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π —Ç—Ä–µ—Ç—å—è (—Å–∞–º–∞—è –¥–µ—à–µ–≤–∞—è) –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.',
    
    status: 'expired',
    createdBy: 'user:marketing-mgr',
    createdAt: '2025-04-15T12:00:00Z',
    activatedAt: '2025-05-01T00:00:00Z',
    deactivatedAt: '2025-05-12T23:59:59Z',
    
    usageCount: 156,
    revenue: 2100000,
    conversionRate: 24.1
  },
  {
    id: 'OFF-004',
    name: 'VIP –ø–∞–∫–µ—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π',
    description: '–°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø—Ä–µ–º–∏—É–º —É—Å–ª—É–≥–∏ –¥–ª—è VIP –∫–ª–∏–µ–Ω—Ç–æ–≤',
    type: 'discount',
    discountType: 'percentage',
    discountValue: 10,
    
    minOrderAmount: 30000,
    
    applicableServices: ['SVC-002', 'SVC-003'],
    applicableChannels: ['website', 'call_center', 'crm'],
    applicableSegments: ['vip', 'premium'],
    
    validFrom: '2025-06-01T00:00:00Z',
    validTo: '2025-12-31T23:59:59Z',
    
    combinableWithOthers: true,
    priority: 6,
    
    bannerText: 'üëë VIP –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏',
    terms: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–ª—è VIP –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–º–∏—É–º —É—Å–ª—É–≥–∏.',
    
    status: 'planned',
    createdBy: 'user:vip-mgr',
    createdAt: '2025-09-15T16:00:00Z',
    
    usageCount: 0,
    revenue: 0
  }
];

const mockPromoCodes: PromoCode[] = [
  {
    id: 'PC-001',
    code: 'SUMMER2025',
    offerId: 'OFF-001',
    maxUses: 500,
    usedCount: 89,
    oneTimeUse: false,
    isActive: true,
    createdAt: '2025-05-10T14:30:00Z',
    lastUsedAt: '2025-09-16T18:25:00Z'
  },
  {
    id: 'PC-002', 
    code: 'WELCOME20',
    offerId: 'OFF-002',
    maxUses: 1000,
    usedCount: 234,
    oneTimeUse: true,
    isActive: true,
    createdAt: '2025-01-15T10:30:00Z',
    lastUsedAt: '2025-09-17T14:15:00Z'
  },
  {
    id: 'PC-003',
    code: 'MAY2PLUS1',
    offerId: 'OFF-003',
    maxUses: 200,
    usedCount: 156,
    oneTimeUse: false,
    isActive: false,
    createdAt: '2025-04-15T12:30:00Z',
    lastUsedAt: '2025-05-12T20:45:00Z'
  },
  {
    id: 'PC-004',
    code: 'VIPEXCLUSIVE',
    offerId: 'OFF-004',
    assignedUserIds: ['USER-VIP-001', 'USER-VIP-002', 'USER-VIP-003'],
    usedCount: 0,
    oneTimeUse: true,
    isActive: true,
    createdAt: '2025-09-15T16:30:00Z'
  }
];

const mockBundles: Bundle[] = [
  {
    id: 'BND-001',
    name: '–≠–∫—Å—Ç—Ä–∏–º –£–∏–∫–µ–Ω–¥',
    description: '–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞: –±–∞–≥–≥–∏ + –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã + —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è',
    
    services: [
      { serviceId: 'SVC-001', serviceName: '–ë–∞–≥–≥–∏-—Ç—É—Ä –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞', quantity: 1, originalPrice: 8500 },
      { serviceId: 'SVC-004', serviceName: '–ö–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã –≤ –≥–æ—Ä–∞—Ö', quantity: 1, originalPrice: 7000 },
      { serviceId: 'SVC-006', serviceName: '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ', quantity: 1, originalPrice: 3500 }
    ],
    
    originalTotalPrice: 19000,
    bundlePrice: 16000,
    savings: 3000,
    discountPercentage: 15.8,
    
    minAdvanceBooking: 3,
    validityPeriod: 30,
    transferable: true,
    
    applicableChannels: ['website', 'mobile_app'],
    applicableSegments: ['standard', 'premium'],
    
    validFrom: '2025-06-01T00:00:00Z',
    validTo: '2025-08-31T23:59:59Z',
    
    isActive: true,
    createdBy: 'user:product-mgr',
    createdAt: '2025-05-25T11:00:00Z',
    
    salesCount: 67,
    totalRevenue: 1072000
  },
  {
    id: 'BND-002',
    name: '–ü—Ä–µ–º–∏—É–º –†–æ–º–∞–Ω—Ç–∏–∫',
    description: '–†–æ—Å–∫–æ—à–Ω—ã–π –ø–∞–∫–µ—Ç –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤: –≤–µ—Ä—Ç–æ–ª–µ—Ç + —è—Ö—Ç–∞ + –¥–µ–≥—É—Å—Ç–∞—Ü–∏—è',
    
    services: [
      { serviceId: 'SVC-002', serviceName: '–í–µ—Ä—Ç–æ–ª–µ—Ç–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è', quantity: 1, originalPrice: 45000 },
      { serviceId: 'SVC-003', serviceName: '–Ø—Ö—Ç–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞', quantity: 1, originalPrice: 25000 },
      { serviceId: 'SVC-005', serviceName: '–î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç—É—Ä', quantity: 1, originalPrice: 4500 }
    ],
    
    originalTotalPrice: 74500,
    bundlePrice: 65000,
    savings: 9500,
    discountPercentage: 12.8,
    
    minAdvanceBooking: 7,
    validityPeriod: 60,
    transferable: false,
    
    applicableChannels: ['website', 'call_center', 'crm'],
    applicableSegments: ['premium', 'vip'],
    
    validFrom: '2025-06-01T00:00:00Z',
    validTo: '2025-12-31T23:59:59Z',
    
    isActive: true,
    createdBy: 'user:product-mgr',
    createdAt: '2025-05-30T14:00:00Z',
    
    salesCount: 23,
    totalRevenue: 1495000
  },
  {
    id: 'BND-003',
    name: '–ö—É–ª—å—Ç—É—Ä–Ω–∞—è –ü—Ä–æ–≥—Ä–∞–º–º–∞',
    description: '–ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç: –¥–µ–≥—É—Å—Ç–∞—Ü–∏—è + —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å –≥–∏–¥–æ–º',
    
    services: [
      { serviceId: 'SVC-005', serviceName: '–î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç—É—Ä', quantity: 1, originalPrice: 4500 },
      { serviceId: 'SVC-006', serviceName: '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ', quantity: 1, originalPrice: 3500 }
    ],
    
    originalTotalPrice: 8000,
    bundlePrice: 7000,
    savings: 1000,
    discountPercentage: 12.5,
    
    minAdvanceBooking: 1,
    validityPeriod: 14,
    transferable: true,
    
    applicableChannels: ['website', 'mobile_app', 'partner'],
    applicableSegments: ['standard', 'budget'],
    
    validFrom: '2025-09-01T00:00:00Z',
    validTo: '2025-11-30T23:59:59Z',
    
    isActive: true,
    createdBy: 'user:product-mgr',
    createdAt: '2025-08-15T09:00:00Z',
    
    salesCount: 12,
    totalRevenue: 84000
  }
];

// üéØ KPI –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø

interface PricingKPI {
  title: string;
  value: string;
  change: string;
  trend: 'up' | 'down' | 'neutral';
  target?: string;
  description: string;
  icon: React.ComponentType<any>;
}

const pricingKpis: PricingKPI[] = [
  {
    title: "–ö–æ–Ω–≤–µ—Ä—Å–∏—è",
    value: "15.4%",
    change: "+2.1%",
    trend: "up",
    target: "16%",
    description: "–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π",
    icon: TrendingUp
  },
  {
    title: "–°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞",
    value: "68.5%",
    change: "+1.8%",
    trend: "up",
    target: "70%",
    description: "–°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥",
    icon: Percent
  },
  {
    title: "–í—ã—Ä—É—á–∫–∞ –ø–æ –∞–∫—Ü–∏—è–º",
    value: "‚ÇΩ4.2–ú",
    change: "+‚ÇΩ680–ö",
    trend: "up",
    target: "‚ÇΩ5–ú",
    description: "–î–æ—Ö–æ–¥ –æ—Ç –∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
    icon: Gift
  },
  {
    title: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
    value: "23.7%",
    change: "+5.2%",
    trend: "up",
    target: "25%",
    description: "–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏",
    icon: Tag
  }
];

// üéØ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–ê–¢–£–°–û–í

const priceListStatusConfig = {
  'draft': { label: '–ß–µ—Ä–Ω–æ–≤–∏–∫', color: 'bg-gray-500/10 text-gray-400', icon: FileText },
  'published': { label: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω', color: 'bg-green-500/10 text-green-400', icon: CheckCircle },
  'archived': { label: '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω', color: 'bg-orange-500/10 text-orange-400', icon: XCircle }
};

const offerStatusConfig = {
  'planned': { label: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞', color: 'bg-blue-500/10 text-blue-400', icon: Clock },
  'active': { label: '–ê–∫—Ç–∏–≤–Ω–∞', color: 'bg-green-500/10 text-green-400', icon: Play },
  'expired': { label: '–ò—Å—Ç–µ–∫–ª–∞', color: 'bg-red-500/10 text-red-400', icon: XCircle },
  'paused': { label: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', color: 'bg-yellow-500/10 text-yellow-400', icon: Pause },
  'cancelled': { label: '–û—Ç–º–µ–Ω–µ–Ω–∞', color: 'bg-gray-500/10 text-gray-400', icon: Ban }
};

const offerTypeConfig = {
  'discount': { label: '–°–∫–∏–¥–∫–∞', color: 'bg-red-500/10 text-red-400', icon: Percent },
  'bonus': { label: '–ë–æ–Ω—É—Å', color: 'bg-green-500/10 text-green-400', icon: Gift },
  'bundle': { label: '–ü–∞–∫–µ—Ç', color: 'bg-blue-500/10 text-blue-400', icon: Package },
  'freebie': { label: '–ü–æ–¥–∞—Ä–æ–∫', color: 'bg-purple-500/10 text-purple-400', icon: Heart },
  'upgrade': { label: '–ê–ø–≥—Ä–µ–π–¥', color: 'bg-orange-500/10 text-orange-400', icon: Crown }
};

const channelConfig = {
  'website': { label: '–°–∞–π—Ç', icon: ExternalLink },
  'mobile_app': { label: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', icon: Phone },
  'call_center': { label: 'Call-—Ü–µ–Ω—Ç—Ä', icon: Phone },
  'partner': { label: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã', icon: Users },
  'b2b': { label: 'B2B', icon: Building },
  'crm': { label: 'CRM', icon: Users }
};

const segmentConfig = {
  'premium': { label: '–ü—Ä–µ–º–∏—É–º', color: 'bg-purple-500/10 text-purple-400' },
  'standard': { label: '–°—Ç–∞–Ω–¥–∞—Ä—Ç', color: 'bg-blue-500/10 text-blue-400' },
  'budget': { label: '–ë—é–¥–∂–µ—Ç', color: 'bg-green-500/10 text-green-400' },
  'vip': { label: 'VIP', color: 'bg-yellow-500/10 text-yellow-400' },
  'corporate': { label: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π', color: 'bg-gray-500/10 text-gray-400' },
  'first_time': { label: '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç', color: 'bg-pink-500/10 text-pink-400' }
};

// üéØ –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢

interface GTSPricingOffersModuleProps {
  onBackToModules?: () => void;
}

export function GTSPricingOffersModule({ onBackToModules }: GTSPricingOffersModuleProps) {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [activeView, setActiveView] = useState<'overview' | 'pricelists' | 'offers' | 'promocodes' | 'bundles' | 'simulator' | 'analytics'>('overview');
  const [selectedItems, setSelectedItems] = useState<string[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [channelFilter, setChannelFilter] = useState<string>('all');
  const [showPriceListModal, setShowPriceListModal] = useState(false);
  const [showOfferModal, setShowOfferModal] = useState(false);
  const [showSimulatorModal, setShowSimulatorModal] = useState(false);
  const [selectedPriceList, setSelectedPriceList] = useState<PriceList | null>(null);
  const [selectedOffer, setSelectedOffer] = useState<Offer | null>(null);
  const [priceLists, setPriceLists] = useState<PriceList[]>(mockPriceLists);
  const [offers, setOffers] = useState<Offer[]>(mockOffers);
  const [promoCodes, setPromoCodes] = useState<PromoCode[]>(mockPromoCodes);
  const [bundles, setBundles] = useState<Bundle[]>(mockBundles);
  const [conflicts, setConflicts] = useState<PriceConflict[]>([]);

  // –°–∏–º—É–ª—è—Ç–æ—Ä —Ü–µ–Ω
  const [simulatorParams, setSimulatorParams] = useState({
    serviceId: '',
    duration: 3,
    groupSize: 2,
    date: new Date().toISOString().split('T')[0],
    channel: 'website' as Channel,
    segment: 'standard' as Segment
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const filteredPriceLists = useMemo(() => {
    return priceLists.filter(pl => {
      const matchesSearch = 
        pl.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        pl.description?.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesStatus = statusFilter === 'all' || pl.status === statusFilter;
      const matchesChannel = channelFilter === 'all' || pl.channel === channelFilter;
      
      return matchesSearch && matchesStatus && matchesChannel;
    });
  }, [priceLists, searchQuery, statusFilter, channelFilter]);

  const filteredOffers = useMemo(() => {
    return offers.filter(offer => {
      const matchesSearch = 
        offer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        offer.description.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesStatus = statusFilter === 'all' || offer.status === statusFilter;
      
      return matchesSearch && matchesStatus;
    });
  }, [offers, searchQuery, statusFilter]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const handlePublishPriceList = async (priceListId: string) => {
    const priceList = priceLists.find(pl => pl.id === priceListId);
    if (!priceList || priceList.status !== 'draft') return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    const priceConflicts = checkPriceConflicts(priceList);
    if (priceConflicts.some(c => c.severity === 'high')) {
      toast.error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è');
      setConflicts(priceConflicts);
      return;
    }

    // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    if (priceList.parentId) {
      setPriceLists(prev => prev.map(pl => 
        pl.id === priceList.parentId 
          ? { ...pl, status: 'archived' as PriceListStatus }
          : pl
      ));
    }

    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    setPriceLists(prev => prev.map(pl => 
      pl.id === priceListId 
        ? { 
            ...pl, 
            status: 'published' as PriceListStatus,
            publishedBy: 'user:exec-1',
            publishedAt: new Date().toISOString()
          }
        : pl
    ));

    toast.success('–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω');
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    console.log({
      type: 'PriceListPublished',
      priceListId,
      version: priceList.version,
      timestamp: new Date().toISOString(),
      actor: 'user:exec-1'
    });
  };

  const handleActivateOffer = async (offerId: string) => {
    const offer = offers.find(o => o.id === offerId);
    if (!offer || offer.status !== 'planned') return;

    setOffers(prev => prev.map(o => 
      o.id === offerId 
        ? { 
            ...o, 
            status: 'active' as OfferStatus,
            activatedAt: new Date().toISOString()
          }
        : o
    ));

    toast.success('–ê–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
    
    console.log({
      type: 'OfferActivated',
      offerId,
      offerName: offer.name,
      timestamp: new Date().toISOString(),
      actor: 'user:exec-1'
    });
  };

  const handlePauseOffer = async (offerId: string) => {
    setOffers(prev => prev.map(o => 
      o.id === offerId 
        ? { ...o, status: 'paused' as OfferStatus }
        : o
    ));

    toast.success('–ê–∫—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  };

  const handleCreatePromoCode = (offerId: string) => {
    const offer = offers.find(o => o.id === offerId);
    if (!offer) return;

    const code = `PROMO${Date.now()}`.toUpperCase();
    const newPromoCode: PromoCode = {
      id: `PC-${Date.now()}`,
      code,
      offerId,
      maxUses: 100,
      usedCount: 0,
      oneTimeUse: false,
      isActive: true,
      createdAt: new Date().toISOString()
    };

    setPromoCodes(prev => [newPromoCode, ...prev]);
    toast.success(`–ü—Ä–æ–º–æ–∫–æ–¥ ${code} —Å–æ–∑–¥–∞–Ω`);
  };

  const checkPriceConflicts = (priceList: PriceList): PriceConflict[] => {
    const conflicts: PriceConflict[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –ø—Ä–∞–≤–∏–ª
    for (let i = 0; i < priceList.rules.length; i++) {
      for (let j = i + 1; j < priceList.rules.length; j++) {
        const rule1 = priceList.rules[i];
        const rule2 = priceList.rules[j];
        
        if (rule1.serviceId === rule2.serviceId && rule1.isActive && rule2.isActive) {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
          const overlappingTimeSlots = rule1.timeSlots?.some(slot => 
            rule2.timeSlots?.includes(slot)
          );
          
          if (overlappingTimeSlots) {
            conflicts.push({
              id: `CONFLICT-${Date.now()}-${i}-${j}`,
              type: 'overlap',
              severity: 'medium',
              description: `–ü—Ä–∞–≤–∏–ª–∞ ${rule1.id} –∏ ${rule2.id} –∏–º–µ—é—Ç –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —É—Å–ª—É–≥–∏ ${rule1.serviceName}`,
              affectedRules: [rule1.id, rule2.id],
              suggestedFix: '–†–∞–∑–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞'
            });
          }
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤
    const groupedByService = priceList.rules.reduce((acc, rule) => {
      if (!acc[rule.serviceId]) acc[rule.serviceId] = [];
      acc[rule.serviceId].push(rule);
      return acc;
    }, {} as Record<string, PriceRule[]>);
    
    Object.entries(groupedByService).forEach(([serviceId, rules]) => {
      if (rules.length > 1) {
        const prices = rules.map(r => r.basePrice);
        const minPrice = Math.min(...prices);
        const maxPrice = Math.max(...prices);
        
        if ((maxPrice - minPrice) / minPrice > 0.5) { // –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª–µ–µ 50%
          conflicts.push({
            id: `CONFLICT-GAP-${serviceId}`,
            type: 'gap',
            severity: 'low',
            description: `–ë–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å —Ü–µ–Ω –¥–ª—è —É—Å–ª—É–≥–∏ ${rules[0].serviceName}: –æ—Ç ‚ÇΩ${minPrice} –¥–æ ‚ÇΩ${maxPrice}`,
            affectedRules: rules.map(r => r.id),
            suggestedFix: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏–π –≤ —Ü–µ–Ω–∞—Ö'
          });
        }
      }
    });
    
    return conflicts;
  };

  const simulatePrice = (params: any): PriceSimulation => {
    const service = mockServices.find(s => s.id === params.serviceId);
    if (!service) {
      return {
        serviceId: params.serviceId,
        serviceName: '–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        duration: params.duration,
        groupSize: params.groupSize,
        date: params.date,
        channel: params.channel,
        segment: params.segment,
        basePrice: 0,
        appliedModifiers: [],
        finalPrice: 0,
        applicableOffers: []
      };
    }

    // –ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ–Ω–∏–º–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    const applicableRule = priceLists
      .flatMap(pl => pl.rules)
      .find(rule => 
        rule.serviceId === params.serviceId && 
        rule.isActive &&
        (!rule.minDuration || params.duration >= rule.minDuration) &&
        (!rule.maxDuration || params.duration <= rule.maxDuration) &&
        (!rule.minGroupSize || params.groupSize >= rule.minGroupSize) &&
        (!rule.maxGroupSize || params.groupSize <= rule.maxGroupSize)
      );

    if (!applicableRule) {
      return {
        serviceId: params.serviceId,
        serviceName: service.name,
        duration: params.duration,
        groupSize: params.groupSize,
        date: params.date,
        channel: params.channel,
        segment: params.segment,
        basePrice: 0,
        appliedModifiers: [],
        finalPrice: 0,
        applicableOffers: []
      };
    }

    let currentPrice = applicableRule.basePrice;
    const appliedModifiers: any[] = [];

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
    if (applicableRule.seasonMultiplier && applicableRule.seasonMultiplier !== 1) {
      const seasonalAmount = currentPrice * (applicableRule.seasonMultiplier - 1);
      currentPrice *= applicableRule.seasonMultiplier;
      appliedModifiers.push({
        name: '–°–µ–∑–æ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç',
        multiplier: applicableRule.seasonMultiplier,
        amount: seasonalAmount
      });
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö
    const isWeekend = new Date(params.date).getDay() === 0 || new Date(params.date).getDay() === 6;
    if (isWeekend && applicableRule.weekendMultiplier && applicableRule.weekendMultiplier !== 1) {
      const weekendAmount = currentPrice * (applicableRule.weekendMultiplier - 1);
      currentPrice *= applicableRule.weekendMultiplier;
      appliedModifiers.push({
        name: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö',
        multiplier: applicableRule.weekendMultiplier,
        amount: weekendAmount
      });
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–∫–∏–¥–æ–∫
    if (applicableRule.groupDiscountRules) {
      const applicableGroupDiscount = applicableRule.groupDiscountRules
        .filter(gdr => params.groupSize >= gdr.minSize)
        .sort((a, b) => b.discount - a.discount)[0]; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞
      
      if (applicableGroupDiscount) {
        const discountAmount = currentPrice * applicableGroupDiscount.discount;
        currentPrice -= discountAmount;
        appliedModifiers.push({
          name: `–ì—Ä—É–ø–ø–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ (${params.groupSize} —á–µ–ª.)`,
          multiplier: 1 - applicableGroupDiscount.discount,
          amount: -discountAmount
        });
      }
    }

    // –ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö –∞–∫—Ü–∏–π
    const applicableOffers = offers
      .filter(offer => 
        offer.status === 'active' &&
        offer.applicableServices.includes(params.serviceId) &&
        offer.applicableChannels.includes(params.channel) &&
        offer.applicableSegments.includes(params.segment) &&
        (!offer.minOrderAmount || currentPrice >= offer.minOrderAmount) &&
        new Date(offer.validFrom) <= new Date(params.date) &&
        new Date(offer.validTo) >= new Date(params.date)
      )
      .sort((a, b) => b.priority - a.priority)
      .map(offer => {
        let discountAmount = 0;
        
        if (offer.discountType === 'percentage') {
          discountAmount = currentPrice * (offer.discountValue / 100);
          if (offer.maxDiscountAmount) {
            discountAmount = Math.min(discountAmount, offer.maxDiscountAmount);
          }
        } else if (offer.discountType === 'fixed') {
          discountAmount = offer.discountValue;
        }
        
        return {
          offerId: offer.id,
          offerName: offer.name,
          discountAmount,
          finalPriceWithOffer: currentPrice - discountAmount
        };
      });

    return {
      serviceId: params.serviceId,
      serviceName: service.name,
      duration: params.duration,
      groupSize: params.groupSize,
      date: params.date,
      channel: params.channel,
      segment: params.segment,
      basePrice: applicableRule.basePrice,
      appliedModifiers,
      finalPrice: currentPrice,
      applicableOffers
    };
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–Ω–∞—á–∫–æ–≤
  const PriceListStatusBadge = ({ status }: { status: PriceListStatus }) => {
    const config = priceListStatusConfig[status];
    const IconComponent = config.icon;
    
    return (
      <Badge className={config.color}>
        <IconComponent className="w-3 h-3 mr-1" />
        {config.label}
      </Badge>
    );
  };

  const OfferStatusBadge = ({ status }: { status: OfferStatus }) => {
    const config = offerStatusConfig[status];
    const IconComponent = config.icon;
    
    return (
      <Badge className={config.color}>
        <IconComponent className="w-3 h-3 mr-1" />
        {config.label}
      </Badge>
    );
  };

  const OfferTypeBadge = ({ type }: { type: OfferType }) => {
    const config = offerTypeConfig[type];
    const IconComponent = config.icon;
    
    return (
      <Badge className={config.color}>
        <IconComponent className="w-3 h-3 mr-1" />
        {config.label}
      </Badge>
    );
  };

  const ChannelBadge = ({ channel }: { channel: Channel }) => {
    const config = channelConfig[channel];
    const IconComponent = config.icon;
    
    return (
      <Badge variant="outline" className="text-xs">
        <IconComponent className="w-3 h-3 mr-1" />
        {config.label}
      </Badge>
    );
  };

  const SegmentBadge = ({ segment }: { segment: Segment }) => {
    const config = segmentConfig[segment];
    
    return (
      <Badge className={config.color}>
        {config.label}
      </Badge>
    );
  };

  // –û–±–∑–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω
  const OverviewScreen = () => (
    <div className="space-y-6">
      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏ */}
      <Card className="bg-[#121214] border-[#232428]">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <Sparkles className="w-5 h-5 text-yellow-400" />
            –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {offers
              .filter(offer => offer.status === 'active')
              .slice(0, 4)
              .map((offer) => (
                <div 
                  key={offer.id}
                  className="p-4 rounded-lg border border-[#232428] bg-[#17181A] hover:bg-[#1F2024] transition-colors cursor-pointer"
                  onClick={() => {
                    setSelectedOffer(offer);
                    setShowOfferModal(true);
                  }}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-white font-medium">{offer.name}</span>
                        <OfferTypeBadge type={offer.type} />
                        <OfferStatusBadge status={offer.status} />
                        {offer.combinableWithOthers && (
                          <Badge variant="outline" className="text-xs">
                            –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç—Å—è
                          </Badge>
                        )}
                      </div>
                      <div className="text-sm text-[#A6A7AA] mb-2">
                        {offer.description}
                      </div>
                      <div className="flex items-center gap-4 text-xs text-[#A6A7AA]">
                        <div className="flex items-center gap-1">
                          <Tag className="w-3 h-3" />
                          {offer.discountType === 'percentage' ? `${offer.discountValue}%` : `‚ÇΩ${offer.discountValue}`}
                        </div>
                        <div className="flex items-center gap-1">
                          <Users className="w-3 h-3" />
                          {offer.usageCount} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                        </div>
                        <div className="flex items-center gap-1">
                          <DollarSign className="w-3 h-3" />
                          ‚ÇΩ{offer.revenue.toLocaleString('ru-RU')}
                        </div>
                        <div className="flex items-center gap-1">
                          <TrendingUp className="w-3 h-3" />
                          {offer.conversionRate}% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <Badge className={
                        new Date(offer.validTo) < new Date(Date.now() + 7*24*60*60*1000) 
                          ? 'bg-orange-500/10 text-orange-400' 
                          : 'bg-green-500/10 text-green-400'
                      }>
                        –î–æ {new Date(offer.validTo).toLocaleDateString('ru-RU')}
                      </Badge>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end" className="bg-[#121214] border-[#232428]">
                          <DropdownMenuItem 
                            onClick={(e) => {
                              e.stopPropagation();
                              handlePauseOffer(offer.id);
                            }}
                            className="text-white hover:bg-[#17181A]"
                          >
                            <Pause className="w-4 h-4 mr-2" />
                            –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                          </DropdownMenuItem>
                          <DropdownMenuItem 
                            onClick={(e) => {
                              e.stopPropagation();
                              handleCreatePromoCode(offer.id);
                            }}
                            className="text-white hover:bg-[#17181A]"
                          >
                            <Tag className="w-4 h-4 mr-2" />
                            –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </CardContent>
      </Card>

      {/* –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã */}
      <Card className="bg-[#121214] border-[#232428]">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <Calculator className="w-5 h-5 text-blue-400" />
            –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {priceLists
              .filter(pl => pl.status === 'published')
              .slice(0, 3)
              .map((priceList) => (
                <div key={priceList.id} className="p-4 rounded-lg border border-[#232428] bg-[#17181A]">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="flex items-center gap-2 mb-1">
                        <span className="text-white font-medium">{priceList.name}</span>
                        <PriceListStatusBadge status={priceList.status} />
                        <ChannelBadge channel={priceList.channel} />
                        <SegmentBadge segment={priceList.segment} />
                      </div>
                      <div className="text-sm text-[#A6A7AA] mb-2">
                        {priceList.description}
                      </div>
                      <div className="flex items-center gap-4 text-xs text-[#A6A7AA]">
                        <div>–ü—Ä–∞–≤–∏–ª: {priceList.rules.length}</div>
                        <div>–í–∞–ª—é—Ç–∞: {priceList.currency}</div>
                        <div>–í–µ—Ä—Å–∏—è: {priceList.version}</div>
                        <div>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {priceList.validTo ? new Date(priceList.validTo).toLocaleDateString('ru-RU') : '‚àû'}</div>
                      </div>
                    </div>
                    
                    <div className="text-right">
                      <div className="text-white text-sm">
                        {priceList.bookingsCount || 0} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
                      </div>
                      <div className="text-xs text-[#A6A7AA]">
                        ‚ÇΩ{((priceList.totalRevenue || 0) / 1000000).toFixed(1)}–ú –≤—ã—Ä—É—á–∫–∞
                      </div>
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </CardContent>
      </Card>

      {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∞–Ω–¥–ª—ã */}
      <Card className="bg-[#121214] border-[#232428]">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <Package className="w-5 h-5 text-purple-400" />
            –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4">
            {bundles
              .filter(bundle => bundle.isActive)
              .sort((a, b) => b.salesCount - a.salesCount)
              .slice(0, 3)
              .map((bundle) => (
                <div key={bundle.id} className="p-4 rounded-lg border border-[#232428] bg-[#17181A]">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-white font-medium">{bundle.name}</span>
                        <Badge className="bg-green-500/10 text-green-400">
                          -{bundle.discountPercentage.toFixed(1)}%
                        </Badge>
                        <Badge variant="outline" className="text-xs">
                          {bundle.services.length} —É—Å–ª—É–≥
                        </Badge>
                      </div>
                      <div className="text-sm text-[#A6A7AA] mb-2">
                        {bundle.description}
                      </div>
                      <div className="flex items-center gap-4 text-xs text-[#A6A7AA]">
                        <div className="flex items-center gap-1">
                          <ShoppingCart className="w-3 h-3" />
                          {bundle.salesCount} –ø—Ä–æ–¥–∞–∂
                        </div>
                        <div className="flex items-center gap-1">
                          <DollarSign className="w-3 h-3" />
                          ‚ÇΩ{bundle.totalRevenue.toLocaleString('ru-RU')}
                        </div>
                        <div className="flex items-center gap-1">
                          <Calendar className="w-3 h-3" />
                          {bundle.validityPeriod} –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è
                        </div>
                      </div>
                    </div>
                    
                    <div className="text-right">
                      <div className="text-white text-lg font-medium">
                        ‚ÇΩ{bundle.bundlePrice.toLocaleString('ru-RU')}
                      </div>
                      <div className="text-xs text-[#A6A7AA] line-through">
                        ‚ÇΩ{bundle.originalTotalPrice.toLocaleString('ru-RU')}
                      </div>
                      <div className="text-xs text-green-400">
                        –≠–∫–æ–Ω–æ–º–∏—è ‚ÇΩ{bundle.savings.toLocaleString('ru-RU')}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </CardContent>
      </Card>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <Card className="bg-[#121214] border-[#232428]">
        <CardHeader>
          <CardTitle className="text-white">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
            <Button className="bg-[#91040C] hover:bg-[#91040C]/90 h-auto p-4 flex-col">
              <Plus className="w-5 h-5 mb-2" />
              <span className="text-sm">–ù–æ–≤—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</span>
            </Button>
            <Button variant="outline" className="border-[#232428] text-white hover:bg-[#17181A] h-auto p-4 flex-col">
              <Gift className="w-5 h-5 mb-2" />
              <span className="text-sm">–°–æ–∑–¥–∞—Ç—å –∞–∫—Ü–∏—é</span>
            </Button>
            <Button 
              variant="outline" 
              className="border-[#232428] text-white hover:bg-[#17181A] h-auto p-4 flex-col"
              onClick={() => setShowSimulatorModal(true)}
            >
              <Calculator className="w-5 h-5 mb-2" />
              <span className="text-sm">–°–∏–º—É–ª—è—Ç–æ—Ä —Ü–µ–Ω</span>
            </Button>
            <Button variant="outline" className="border-[#232428] text-white hover:bg-[#17181A] h-auto p-4 flex-col">
              <BarChart3 className="w-5 h-5 mb-2" />
              <span className="text-sm">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <div className="flex items-center gap-2 text-sm text-[#A6A7AA] mb-2">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={onBackToModules}
              className="p-0 text-[#A6A7AA] hover:text-white"
            >
              <Home className="w-4 h-4 mr-1" />
              Dashboard
            </Button>
            <ChevronRight className="w-4 h-4" />
            <span className="text-white">Pricing & Offers</span>
          </div>
          <h1 className="text-3xl font-heading text-white">–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Ü–∏–∏</h1>
          <p className="text-[#A6A7AA]">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏, –∞–∫—Ü–∏—è–º–∏, –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –∏ –ø–∞–∫–µ—Ç–∞–º–∏ —É—Å–ª—É–≥ ‚Ä¢ {filteredPriceLists.length} –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ ‚Ä¢ {filteredOffers.length} –∞–∫—Ü–∏–π
          </p>
        </div>
        <div className="flex items-center gap-3">
          <Badge className="bg-green-500/10 text-green-400">
            <Activity className="w-3 h-3 mr-1" />
            {offers.filter(o => o.status === 'active').length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π
          </Badge>
          <Button className="bg-[#91040C] hover:bg-[#91040C]/90">
            <Plus className="w-4 h-4 mr-2" />
            –ù–æ–≤—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
          </Button>
        </div>
      </div>

      {/* KPI –ú–µ—Ç—Ä–∏–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {pricingKpis.map((kpi, index) => {
          const IconComponent = kpi.icon;
          const isPositive = kpi.trend === 'up';
          
          return (
            <Card key={index} className="bg-[#121214] border-[#232428] hover:border-[#91040C]/50 transition-colors">
              <CardContent className="p-4">
                <div className="flex items-center justify-between mb-2">
                  <IconComponent className="w-5 h-5 text-[#A6A7AA]" />
                  <div className="flex items-center gap-1">
                    <ArrowUpRight className={`w-3 h-3 ${isPositive ? 'text-green-400' : 'text-red-400'} ${!isPositive && 'rotate-90'}`} />
                    <span className={`text-xs ${isPositive ? 'text-green-400' : 'text-red-400'}`}>
                      {kpi.change}
                    </span>
                  </div>
                </div>
                <div className="mb-1">
                  <div className="text-xl font-heading text-white">{kpi.value}</div>
                  <div className="text-sm font-medium text-[#A6A7AA]">{kpi.title}</div>
                </div>
                <div className="text-xs text-[#A6A7AA]">{kpi.description}</div>
                {kpi.target && (
                  <div className="text-xs text-blue-400 mt-1">–¶–µ–ª—å: {kpi.target}</div>
                )}
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º */}
      <Card className="bg-[#121214] border-[#232428]">
        <CardContent className="p-4">
          <Tabs value={activeView} onValueChange={(value: any) => setActiveView(value)} className="w-full">
            <TabsList className="grid w-full grid-cols-7 bg-[#17181A]">
              <TabsTrigger value="overview" className="text-[#A6A7AA] data-[state=active]:text-white">
                <Layers className="w-4 h-4 mr-2" />
                –û–±–∑–æ—Ä
              </TabsTrigger>
              <TabsTrigger value="pricelists" className="text-[#A6A7AA] data-[state=active]:text-white">
                <Calculator className="w-4 h-4 mr-2" />
                –ü—Ä–∞–π—Å-–ª–∏—Å—Ç—ã
              </TabsTrigger>
              <TabsTrigger value="offers" className="text-[#A6A7AA] data-[state=active]:text-white">
                <Gift className="w-4 h-4 mr-2" />
                –ê–∫—Ü–∏–∏
              </TabsTrigger>
              <TabsTrigger value="promocodes" className="text-[#A6A7AA] data-[state=active]:text-white">
                <Tag className="w-4 h-4 mr-2" />
                –ü—Ä–æ–º–æ–∫–æ–¥—ã
              </TabsTrigger>
              <TabsTrigger value="bundles" className="text-[#A6A7AA] data-[state=active]:text-white">
                <Package className="w-4 h-4 mr-2" />
                –ü–∞–∫–µ—Ç—ã
              </TabsTrigger>
              <TabsTrigger value="simulator" className="text-[#A6A7AA] data-[state=active]:text-white">
                <Zap className="w-4 h-4 mr-2" />
                –°–∏–º—É–ª—è—Ç–æ—Ä
              </TabsTrigger>
              <TabsTrigger value="analytics" className="text-[#A6A7AA] data-[state=active]:text-white">
                <BarChart3 className="w-4 h-4 mr-2" />
                –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
              </TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="mt-6">
              <OverviewScreen />
            </TabsContent>

            <TabsContent value="pricelists" className="mt-6">
              <div className="space-y-4">
                {/* –§–∏–ª—å—Ç—Ä—ã */}
                <div className="flex items-center gap-4">
                  <div className="flex-1">
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="bg-[#17181A] border-[#232428]"
                    />
                  </div>
                  <Select value={statusFilter} onValueChange={setStatusFilter}>
                    <SelectTrigger className="w-40 bg-[#17181A] border-[#232428]">
                      <SelectValue placeholder="–°—Ç–∞—Ç—É—Å" />
                    </SelectTrigger>
                    <SelectContent className="bg-[#121214] border-[#232428]">
                      <SelectItem value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</SelectItem>
                      <SelectItem value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</SelectItem>
                      <SelectItem value="published">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</SelectItem>
                      <SelectItem value="archived">–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω</SelectItem>
                    </SelectContent>
                  </Select>
                  <Select value={channelFilter} onValueChange={setChannelFilter}>
                    <SelectTrigger className="w-48 bg-[#17181A] border-[#232428]">
                      <SelectValue placeholder="–ö–∞–Ω–∞–ª" />
                    </SelectTrigger>
                    <SelectContent className="bg-[#121214] border-[#232428]">
                      <SelectItem value="all">–í—Å–µ –∫–∞–Ω–∞–ª—ã</SelectItem>
                      <SelectItem value="website">–°–∞–π—Ç</SelectItem>
                      <SelectItem value="mobile_app">–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</SelectItem>
                      <SelectItem value="call_center">Call-—Ü–µ–Ω—Ç—Ä</SelectItem>
                      <SelectItem value="partner">–ü–∞—Ä—Ç–Ω–µ—Ä—ã</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* –°–ø–∏—Å–æ–∫ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ */}
                <div className="grid gap-4">
                  {filteredPriceLists.map((priceList) => (
                    <Card key={priceList.id} className="bg-[#121214] border-[#232428] hover:border-[#91040C]/50 transition-colors">
                      <CardContent className="p-6">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-2">
                              <h3 className="text-lg font-medium text-white">{priceList.name}</h3>
                              <PriceListStatusBadge status={priceList.status} />
                              <ChannelBadge channel={priceList.channel} />
                              <SegmentBadge segment={priceList.segment} />
                              <Badge variant="outline" className="text-xs">
                                v{priceList.version}
                              </Badge>
                            </div>
                            
                            <div className="text-sm text-[#A6A7AA] mb-3">
                              {priceList.description}
                            </div>
                            
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-3">
                              <div>
                                <Label className="text-[#A6A7AA] text-xs">–ü—Ä–∞–≤–∏–ª —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</Label>
                                <div className="text-white text-sm">{priceList.rules.length}</div>
                              </div>
                              <div>
                                <Label className="text-[#A6A7AA] text-xs">–°–µ–∑–æ–Ω</Label>
                                <div className="text-white text-sm capitalize">{priceList.season}</div>
                              </div>
                              <div>
                                <Label className="text-[#A6A7AA] text-xs">–í–∞–ª—é—Ç–∞</Label>
                                <div className="text-white text-sm">{priceList.currency}</div>
                              </div>
                              <div>
                                <Label className="text-[#A6A7AA] text-xs">–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ</Label>
                                <div className="text-white text-sm">
                                  {priceList.validTo ? new Date(priceList.validTo).toLocaleDateString('ru-RU') : '‚àû'}
                                </div>
                              </div>
                            </div>
                            
                            {priceList.bookingsCount && (
                              <div className="flex items-center gap-4 mb-3">
                                <div>
                                  <Label className="text-[#A6A7AA] text-xs">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</Label>
                                  <div className="text-white text-sm">{priceList.bookingsCount}</div>
                                </div>
                                <div>
                                  <Label className="text-[#A6A7AA] text-xs">–í—ã—Ä—É—á–∫–∞</Label>
                                  <div className="text-white text-sm">
                                    ‚ÇΩ{((priceList.totalRevenue || 0) / 1000000).toFixed(1)}–ú
                                  </div>
                                </div>
                                <div>
                                  <Label className="text-[#A6A7AA] text-xs">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</Label>
                                  <div className="text-white text-sm">
                                    ‚ÇΩ{(priceList.avgOrderValue || 0).toLocaleString('ru-RU')}
                                  </div>
                                </div>
                              </div>
                            )}
                            
                            <div className="text-sm text-[#A6A7AA]">
                              –°–æ–∑–¥–∞–Ω: {new Date(priceList.createdAt).toLocaleDateString('ru-RU')} ‚Ä¢ 
                              –ê–≤—Ç–æ—Ä: {priceList.createdBy}
                              {priceList.publishedAt && (
                                <> ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {new Date(priceList.publishedAt).toLocaleDateString('ru-RU')}</>
                              )}
                            </div>
                          </div>
                          
                          <div className="flex items-center gap-2 ml-4">
                            {priceList.status === 'draft' && (
                              <Button 
                                size="sm"
                                className="bg-green-600 hover:bg-green-700"
                                onClick={() => handlePublishPriceList(priceList.id)}
                              >
                                <CheckCircle className="w-4 h-4 mr-1" />
                                –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                              </Button>
                            )}
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                                  <MoreHorizontal className="h-4 w-4" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end" className="bg-[#121214] border-[#232428]">
                                <DropdownMenuItem 
                                  onClick={() => {
                                    setSelectedPriceList(priceList);
                                    setShowPriceListModal(true);
                                  }}
                                  className="text-white hover:bg-[#17181A]"
                                >
                                  <Eye className="w-4 h-4 mr-2" />
                                  –ü—Ä–æ—Å–º–æ—Ç—Ä
                                </DropdownMenuItem>
                                <DropdownMenuItem className="text-white hover:bg-[#17181A]">
                                  <Copy className="w-4 h-4 mr-2" />
                                  –°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Å–∏—é
                                </DropdownMenuItem>
                                <DropdownMenuItem className="text-white hover:bg-[#17181A]">
                                  <Download className="w-4 h-4 mr-2" />
                                  –≠–∫—Å–ø–æ—Ä—Ç
                                </DropdownMenuItem>
                                {priceList.status === 'published' && (
                                  <DropdownMenuItem className="text-white hover:bg-[#17181A]">
                                    <RotateCcw className="w-4 h-4 mr-2" />
                                    –û—Ç–∫–∞—Ç–∏—Ç—å –≤–µ—Ä—Å–∏—é
                                  </DropdownMenuItem>
                                )}
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </TabsContent>

            <TabsContent value="offers" className="mt-6">
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏</h3>
                
                <div className="grid gap-4">
                  {filteredOffers.map((offer) => (
                    <Card key={offer.id} className="bg-[#121214] border-[#232428]">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <h4 className="text-white font-medium">{offer.name}</h4>
                              <OfferStatusBadge status={offer.status} />
                              <OfferTypeBadge type={offer.type} />
                              {offer.combinableWithOthers && (
                                <Badge variant="outline" className="text-xs">
                                  –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç—Å—è
                                </Badge>
                              )}
                            </div>
                            <p className="text-sm text-[#A6A7AA] mb-2">
                              {offer.description}
                            </p>
                            <div className="flex items-center gap-4 mb-2 text-xs text-[#A6A7AA]">
                              <div className="flex items-center gap-1">
                                <Tag className="w-3 h-3" />
                                {offer.discountType === 'percentage' ? `${offer.discountValue}%` : `‚ÇΩ${offer.discountValue}`}
                              </div>
                              <div className="flex items-center gap-1">
                                <Users className="w-3 h-3" />
                                {offer.usageCount} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                              </div>
                              <div className="flex items-center gap-1">
                                <DollarSign className="w-3 h-3" />
                                ‚ÇΩ{offer.revenue.toLocaleString('ru-RU')}
                              </div>
                              {offer.conversionRate && (
                                <div className="flex items-center gap-1">
                                  <TrendingUp className="w-3 h-3" />
                                  {offer.conversionRate}% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
                                </div>
                              )}
                            </div>
                            <div className="text-xs text-[#A6A7AA]">
                              {new Date(offer.validFrom).toLocaleDateString('ru-RU')} ‚Äî {new Date(offer.validTo).toLocaleDateString('ru-RU')} ‚Ä¢ 
                              –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {offer.priority}
                            </div>
                          </div>
                          
                          <div className="flex items-center gap-2">
                            {offer.status === 'planned' && (
                              <Button 
                                size="sm"
                                className="bg-green-600 hover:bg-green-700"
                                onClick={() => handleActivateOffer(offer.id)}
                              >
                                <Play className="w-4 h-4 mr-1" />
                                –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                              </Button>
                            )}
                            {offer.status === 'active' && (
                              <Button 
                                size="sm"
                                variant="outline"
                                onClick={() => handlePauseOffer(offer.id)}
                              >
                                <Pause className="w-4 h-4 mr-1" />
                                –ü–∞—É–∑–∞
                              </Button>
                            )}
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => {
                                setSelectedOffer(offer);
                                setShowOfferModal(true);
                              }}
                            >
                              –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </TabsContent>

            <TabsContent value="promocodes" className="mt-6">
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-white">–ü—Ä–æ–º–æ–∫–æ–¥—ã</h3>
                
                <div className="grid gap-4">
                  {promoCodes.map((promoCode) => {
                    const offer = offers.find(o => o.id === promoCode.offerId);
                    const usagePercent = promoCode.maxUses ? (promoCode.usedCount / promoCode.maxUses) * 100 : 0;
                    
                    return (
                      <Card key={promoCode.id} className="bg-[#121214] border-[#232428]">
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-2">
                                <span className="text-white font-mono text-lg">{promoCode.code}</span>
                                <Badge className={promoCode.isActive ? 'bg-green-500/10 text-green-400' : 'bg-gray-500/10 text-gray-400'}>
                                  {promoCode.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                                </Badge>
                                {promoCode.oneTimeUse && (
                                  <Badge variant="outline" className="text-xs">
                                    –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π
                                  </Badge>
                                )}
                                {promoCode.assignedUserIds && (
                                  <Badge className="bg-purple-500/10 text-purple-400">
                                    –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π
                                  </Badge>
                                )}
                              </div>
                              
                              <div className="text-sm text-[#A6A7AA] mb-2">
                                –ê–∫—Ü–∏—è: {offer?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–∫—Ü–∏—è'}
                              </div>
                              
                              <div className="flex items-center gap-4 mb-2">
                                <div className="text-xs text-[#A6A7AA]">
                                  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promoCode.usedCount}
                                  {promoCode.maxUses && ` / ${promoCode.maxUses}`}
                                </div>
                                {promoCode.maxUses && (
                                  <div className="flex items-center gap-2">
                                    <Progress value={usagePercent} className="w-24 h-2" />
                                    <span className="text-xs text-[#A6A7AA]">{usagePercent.toFixed(0)}%</span>
                                  </div>
                                )}
                              </div>
                              
                              <div className="text-xs text-[#A6A7AA]">
                                –°–æ–∑–¥–∞–Ω: {new Date(promoCode.createdAt).toLocaleDateString('ru-RU')}
                                {promoCode.lastUsedAt && (
                                  <> ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {new Date(promoCode.lastUsedAt).toLocaleDateString('ru-RU')}</>
                                )}
                              </div>
                            </div>
                            
                            <div className="flex items-center gap-2">
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => {
                                  navigator.clipboard.writeText(promoCode.code);
                                  toast.success('–ü—Ä–æ–º–æ–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');
                                }}
                              >
                                <Copy className="w-4 h-4 mr-1" />
                                –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                              </Button>
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                                    <MoreHorizontal className="h-4 w-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end" className="bg-[#121214] border-[#232428]">
                                  <DropdownMenuItem className="text-white hover:bg-[#17181A]">
                                    <Edit3 className="w-4 h-4 mr-2" />
                                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                  </DropdownMenuItem>
                                  <DropdownMenuItem className="text-white hover:bg-[#17181A]">
                                    <Ban className="w-4 h-4 mr-2" />
                                    {promoCode.isActive ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>
              </div>
            </TabsContent>

            <TabsContent value="bundles" className="mt-6">
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-white">–ü–∞–∫–µ—Ç—ã —É—Å–ª—É–≥</h3>
                
                <div className="grid gap-4">
                  {bundles.map((bundle) => (
                    <Card key={bundle.id} className="bg-[#121214] border-[#232428]">
                      <CardContent className="p-6">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <h4 className="text-white font-medium text-lg">{bundle.name}</h4>
                              <Badge className={bundle.isActive ? 'bg-green-500/10 text-green-400' : 'bg-gray-500/10 text-gray-400'}>
                                {bundle.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                              </Badge>
                              <Badge className="bg-purple-500/10 text-purple-400">
                                -{bundle.discountPercentage.toFixed(1)}%
                              </Badge>
                            </div>
                            
                            <p className="text-sm text-[#A6A7AA] mb-3">
                              {bundle.description}
                            </p>
                            
                            <div className="mb-4">
                              <Label className="text-[#A6A7AA] text-xs mb-2 block">–°–æ—Å—Ç–∞–≤ –ø–∞–∫–µ—Ç–∞:</Label>
                              <div className="space-y-2">
                                {bundle.services.map((service, index) => (
                                  <div key={index} className="flex items-center justify-between text-sm">
                                    <span className="text-white">{service.serviceName}</span>
                                    <div className="text-[#A6A7AA]">
                                      {service.quantity}x ‚ÇΩ{service.originalPrice.toLocaleString('ru-RU')}
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-3">
                              <div>
                                <Label className="text-[#A6A7AA] text-xs">–ü—Ä–æ–¥–∞–∂</Label>
                                <div className="text-white text-sm">{bundle.salesCount}</div>
                              </div>
                              <div>
                                <Label className="text-[#A6A7AA] text-xs">–í—ã—Ä—É—á–∫–∞</Label>
                                <div className="text-white text-sm">
                                  ‚ÇΩ{bundle.totalRevenue.toLocaleString('ru-RU')}
                                </div>
                              </div>
                              <div>
                                <Label className="text-[#A6A7AA] text-xs">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</Label>
                                <div className="text-white text-sm">{bundle.validityPeriod} –¥–Ω–µ–π</div>
                              </div>
                              <div>
                                <Label className="text-[#A6A7AA] text-xs">–ü–µ—Ä–µ–¥–∞—á–∞</Label>
                                <div className="text-white text-sm">
                                  {bundle.transferable ? '–†–∞–∑—Ä–µ—à–µ–Ω–∞' : '–ó–∞–ø—Ä–µ—â–µ–Ω–∞'}
                                </div>
                              </div>
                            </div>
                            
                            <div className="text-sm text-[#A6A7AA]">
                              –î–µ–π—Å—Ç–≤—É–µ—Ç: {new Date(bundle.validFrom).toLocaleDateString('ru-RU')} ‚Äî {new Date(bundle.validTo).toLocaleDateString('ru-RU')}
                            </div>
                          </div>
                          
                          <div className="text-right ml-4">
                            <div className="text-2xl font-medium text-white">
                              ‚ÇΩ{bundle.bundlePrice.toLocaleString('ru-RU')}
                            </div>
                            <div className="text-sm text-[#A6A7AA] line-through">
                              ‚ÇΩ{bundle.originalTotalPrice.toLocaleString('ru-RU')}
                            </div>
                            <div className="text-sm text-green-400">
                              –≠–∫–æ–Ω–æ–º–∏—è ‚ÇΩ{bundle.savings.toLocaleString('ru-RU')}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </TabsContent>

            <TabsContent value="simulator" className="mt-6">
              <div className="text-center py-12">
                <Calculator className="w-12 h-12 text-[#A6A7AA] mx-auto mb-4" />
                <h3 className="text-lg font-medium text-white mb-2">–°–∏–º—É–ª—è—Ç–æ—Ä —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</h3>
                <p className="text-[#A6A7AA] mb-4">
                  –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–∫—Ü–∏–∏
                </p>
                <Button 
                  className="bg-[#91040C] hover:bg-[#91040C]/90"
                  onClick={() => setShowSimulatorModal(true)}
                >
                  <Zap className="w-4 h-4 mr-2" />
                  –û—Ç–∫—Ä—ã—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="analytics" className="mt-6">
              <div className="text-center py-12">
                <BarChart3 className="w-12 h-12 text-[#A6A7AA] mx-auto mb-4" />
                <h3 className="text-lg font-medium text-white mb-2">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</h3>
                <p className="text-[#A6A7AA]">
                  –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏, –º–∞—Ä–∂–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–π
                </p>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ */}
      {showSimulatorModal && (
        <Dialog open={showSimulatorModal} onOpenChange={setShowSimulatorModal}>
          <DialogContent className="max-w-4xl bg-[#121214] border-[#232428] text-white">
            <DialogHeader>
              <DialogTitle className="text-xl text-white">–°–∏–º—É–ª—è—Ç–æ—Ä —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</DialogTitle>
              <DialogDescription className="text-[#A6A7AA]">
                –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
              </DialogDescription>
            </DialogHeader>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
              {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã */}
              <div className="space-y-4">
                <h4 className="text-lg font-medium text-white">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞</h4>
                
                <div>
                  <Label className="text-[#A6A7AA]">–£—Å–ª—É–≥–∞</Label>
                  <Select 
                    value={simulatorParams.serviceId} 
                    onValueChange={(value) => setSimulatorParams(prev => ({ ...prev, serviceId: value }))}
                  >
                    <SelectTrigger className="bg-[#17181A] border-[#232428]">
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É" />
                    </SelectTrigger>
                    <SelectContent className="bg-[#121214] border-[#232428]">
                      {mockServices.map(service => (
                        <SelectItem key={service.id} value={service.id}>
                          {service.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <div>
                    <Label className="text-[#A6A7AA]">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á)</Label>
                    <Input
                      type="number"
                      value={simulatorParams.duration}
                      onChange={(e) => setSimulatorParams(prev => ({ ...prev, duration: Number(e.target.value) }))}
                      className="bg-[#17181A] border-[#232428]"
                    />
                  </div>
                  <div>
                    <Label className="text-[#A6A7AA]">–†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã</Label>
                    <Input
                      type="number"
                      value={simulatorParams.groupSize}
                      onChange={(e) => setSimulatorParams(prev => ({ ...prev, groupSize: Number(e.target.value) }))}
                      className="bg-[#17181A] border-[#232428]"
                    />
                  </div>
                </div>

                <div>
                  <Label className="text-[#A6A7AA]">–î–∞—Ç–∞</Label>
                  <Input
                    type="date"
                    value={simulatorParams.date}
                    onChange={(e) => setSimulatorParams(prev => ({ ...prev, date: e.target.value }))}
                    className="bg-[#17181A] border-[#232428]"
                  />
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <div>
                    <Label className="text-[#A6A7AA]">–ö–∞–Ω–∞–ª</Label>
                    <Select 
                      value={simulatorParams.channel} 
                      onValueChange={(value: Channel) => setSimulatorParams(prev => ({ ...prev, channel: value }))}
                    >
                      <SelectTrigger className="bg-[#17181A] border-[#232428]">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-[#121214] border-[#232428]">
                        <SelectItem value="website">–°–∞–π—Ç</SelectItem>
                        <SelectItem value="mobile_app">–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</SelectItem>
                        <SelectItem value="call_center">Call-—Ü–µ–Ω—Ç—Ä</SelectItem>
                        <SelectItem value="partner">–ü–∞—Ä—Ç–Ω–µ—Ä—ã</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label className="text-[#A6A7AA]">–°–µ–≥–º–µ–Ω—Ç</Label>
                    <Select 
                      value={simulatorParams.segment} 
                      onValueChange={(value: Segment) => setSimulatorParams(prev => ({ ...prev, segment: value }))}
                    >
                      <SelectTrigger className="bg-[#17181A] border-[#232428]">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-[#121214] border-[#232428]">
                        <SelectItem value="standard">–°—Ç–∞–Ω–¥–∞—Ä—Ç</SelectItem>
                        <SelectItem value="premium">–ü—Ä–µ–º–∏—É–º</SelectItem>
                        <SelectItem value="vip">VIP</SelectItem>
                        <SelectItem value="budget">–ë—é–¥–∂–µ—Ç</SelectItem>
                        <SelectItem value="first_time">–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>

              {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
              <div className="space-y-4">
                <h4 className="text-lg font-medium text-white">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h4>
                
                {simulatorParams.serviceId && (() => {
                  const simulation = simulatePrice(simulatorParams);
                  
                  return (
                    <div className="space-y-4">
                      <Card className="bg-[#17181A] border-[#232428]">
                        <CardContent className="p-4">
                          <h5 className="text-white font-medium mb-2">{simulation.serviceName}</h5>
                          <div className="space-y-2">
                            <div className="flex justify-between">
                              <span className="text-[#A6A7AA]">–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞:</span>
                              <span className="text-white">‚ÇΩ{simulation.basePrice.toLocaleString('ru-RU')}</span>
                            </div>
                            
                            {simulation.appliedModifiers.map((modifier, index) => (
                              <div key={index} className="flex justify-between text-sm">
                                <span className="text-[#A6A7AA]">{modifier.name}:</span>
                                <span className={modifier.amount > 0 ? 'text-red-400' : 'text-green-400'}>
                                  {modifier.amount > 0 ? '+' : ''}‚ÇΩ{modifier.amount.toLocaleString('ru-RU')}
                                </span>
                              </div>
                            ))}
                            
                            <Separator className="bg-[#232428]" />
                            <div className="flex justify-between font-medium">
                              <span className="text-white">–ò—Ç–æ–≥–æ:</span>
                              <span className="text-white text-lg">‚ÇΩ{simulation.finalPrice.toLocaleString('ru-RU')}</span>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      {simulation.applicableOffers.length > 0 && (
                        <Card className="bg-[#17181A] border-[#232428]">
                          <CardContent className="p-4">
                            <h5 className="text-white font-medium mb-2">–ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –∞–∫—Ü–∏–∏</h5>
                            <div className="space-y-2">
                              {simulation.applicableOffers.map((offer, index) => (
                                <div key={index} className="flex justify-between text-sm">
                                  <span className="text-[#A6A7AA]">{offer.offerName}:</span>
                                  <div className="text-right">
                                    <div className="text-green-400">
                                      -‚ÇΩ{offer.discountAmount.toLocaleString('ru-RU')}
                                    </div>
                                    <div className="text-white">
                                      = ‚ÇΩ{offer.finalPriceWithOffer.toLocaleString('ru-RU')}
                                    </div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </CardContent>
                        </Card>
                      )}
                    </div>
                  );
                })()}
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}

export default GTSPricingOffersModule;