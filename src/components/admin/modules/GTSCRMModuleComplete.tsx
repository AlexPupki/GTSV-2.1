import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "../../ui/card";
import { Button } from "../../ui/button";
import { Badge } from "../../ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../../ui/tabs";
import { Input } from "../../ui/input";
import { Label } from "../../ui/label";
import { Textarea } from "../../ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../../ui/select";
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from "../../ui/sheet";
import { Avatar, AvatarFallback, AvatarImage } from "../../ui/avatar";
import { Progress } from "../../ui/progress";
import { Skeleton } from "../../ui/skeleton";
import { Separator } from "../../ui/separator";
import { ScrollArea } from "../../ui/scroll-area";
import { 
  ArrowLeft, 
  Plus, 
  Search, 
  Filter, 
  MoreVertical,
  User,
  Phone,
  Mail,
  Calendar,
  DollarSign,
  MapPin,
  Clock,
  TrendingUp,
  MessageSquare,
  FileText,
  Star,
  Edit,
  Trash2,
  Eye,
  ChevronDown,
  ChevronRight,
  Settings,
  PlayCircle,
  PauseCircle,
  AlertCircle,
  CheckCircle2,
  XCircle,
  Target,
  Zap,
  Activity,
  Users,
  Building2,
  Briefcase,
  Send,
  Bot,
  Smile,
  Frown,
  Meh,
  Paperclip,
  Image,
  Mic,
  MoreHorizontal,
  UserPlus,
  BookOpen,
  Brain,
  ThumbsUp,
  ThumbsDown
} from "lucide-react";
import { NewLeadForm, NewDealForm, CRMAnalytics, AutomationRuleBuilder, CRMErrorState } from "./GTSCRMComponents";

interface GTSCRMModuleCompleteProps {
  onBack: () => void;
  onNavigateToCalendar: () => void;
}

// Mock data
const mockLeads = [
  {
    id: "lead-001",
    name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
    company: "TechCorp LLC",
    email: "a.petrov@techcorp.ru",
    phone: "+7 905 123-45-67",
    source: "Website",
    utm: "utm_campaign=premium&utm_source=google",
    status: "hot",
    score: 92,
    owner: "Maria Smirnova",
    createdAt: "2024-12-01",
    lastActivity: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
    value: 450000,
    notes: "–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –ø–∞–∫–µ—Ç–µ –¥–ª—è team building",
    activities: [
      { type: "email", title: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç", date: "2024-12-01 14:30", status: "sent" },
      { type: "call", title: "–ó–≤–æ–Ω–æ–∫ - –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π", date: "2024-12-01 11:00", status: "completed" },
      { type: "meeting", title: "–í—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞", date: "2024-12-02 15:00", status: "scheduled" }
    ]
  },
  {
    id: "lead-002",
    name: "–û–ª—å–≥–∞ –ö–æ–∑–ª–æ–≤–∞",
    company: "Premium Events",
    email: "o.kozlova@events.ru",
    phone: "+7 903 987-65-43",
    source: "Referral",
    utm: "utm_source=partner&utm_medium=referral",
    status: "warm",
    score: 78,
    owner: "Dmitri Volkov",
    createdAt: "2024-11-29",
    lastActivity: "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥",
    value: 280000,
    notes: "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–µ—Ä–∏—é –≤–µ—Ä—Ç–æ–ª–µ—Ç–Ω—ã—Ö —Ç—É—Ä–æ–≤ –¥–ª—è VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤"
  }
];

const mockDeals = [
  {
    id: "deal-001",
    title: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —è—Ö—Ç-–ø–∞–∫–µ—Ç",
    client: "TechCorp LLC",
    contact: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
    value: 450000,
    stage: "offer",
    probability: 75,
    closeDate: "2024-12-15",
    owner: "Maria Smirnova",
    source: "Website",
    createdAt: "2024-11-15"
  },
  {
    id: "deal-002",
    title: "–°–µ—Ä–∏—è –≤–µ—Ä—Ç–æ–ª–µ—Ç–Ω—ã—Ö —Ç—É—Ä–æ–≤",
    client: "Premium Events", 
    contact: "–û–ª—å–≥–∞ –ö–æ–∑–ª–æ–≤–∞",
    value: 280000,
    stage: "qualified",
    probability: 60,
    closeDate: "2024-12-20",
    owner: "Dmitri Volkov",
    source: "Referral",
    createdAt: "2024-11-20"
  },
  {
    id: "deal-003",
    title: "–ë–∞–≥–≥–∏-–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ",
    client: "Adventure Club",
    contact: "–í–∏–∫—Ç–æ—Ä –ö—É–∑–Ω–µ—Ü–æ–≤", 
    value: 125000,
    stage: "new",
    probability: 40,
    closeDate: "2024-12-30",
    owner: "Alex Petrov",
    source: "Social Media",
    createdAt: "2024-11-25"
  },
  {
    id: "deal-004",
    title: "VIP —Å–ø–æ—Ä—Ç–∫–∞—Ä-—Ç—É—Ä",
    client: "Luxury Motors",
    contact: "–ï–ª–µ–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞",
    value: 520000,
    stage: "prepaid",
    probability: 95,
    closeDate: "2024-12-10",
    owner: "Maria Smirnova", 
    source: "Partner",
    createdAt: "2024-10-15"
  }
];

const mockClients = [
  {
    id: "client-001",
    name: "TechCorp LLC",
    contact: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
    email: "contact@techcorp.ru",
    phone: "+7 905 123-45-67", 
    ltv: 850000,
    totalBookings: 12,
    lastActivity: "2024-12-01",
    status: "active",
    category: "Enterprise",
    segment: "High-Value",
    registrationDate: "2023-06-15",
    loyaltyPoints: 2450
  },
  {
    id: "client-002", 
    name: "Premium Events",
    contact: "–û–ª—å–≥–∞ –ö–æ–∑–ª–æ–≤–∞",
    email: "info@premiumevents.ru", 
    phone: "+7 903 987-65-43",
    ltv: 425000,
    totalBookings: 8,
    lastActivity: "2024-11-29",
    status: "active", 
    category: "Premium",
    segment: "Regular",
    registrationDate: "2023-08-20",
    loyaltyPoints: 1280
  }
];

const mockAutomations = [
  {
    id: "auto-001",
    name: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–µ—Ä–∏—è",
    description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∏—Å–µ–º –¥–ª—è –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤",
    trigger: "–ù–æ–≤—ã–π –ª–∏–¥ —Å–æ–∑–¥–∞–Ω",
    action: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é –∏–∑ 5 –ø–∏—Å–µ–º —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 –¥–Ω—è",
    status: "active",
    triggersToday: 12,
    conversions: 5,
    conversionRate: 41.7
  },
  {
    id: "auto-002", 
    name: "–†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
    description: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö",
    trigger: "–ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω 60 –¥–Ω–µ–π",
    action: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å–∫–∏–¥–∫–æ–π",
    status: "active", 
    triggersToday: 3,
    conversions: 2,
    conversionRate: 66.7
  },
  {
    id: "auto-003",
    name: "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏", 
    description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á",
    trigger: "–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
    action: "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å summary –∫–ª–∏–µ–Ω—Ç—É",
    status: "paused",
    triggersToday: 0,
    conversions: 0,
    conversionRate: 0
  }
];

// Communications mock data
const mockConversations = [
  {
    id: '1',
    channel: { type: 'whatsapp', icon: 'üì±', color: '#25D366' },
    client: {
      id: 'c1',
      name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
      avatar: '',
      tier: 'VIP',
      totalBookings: 15,
      lastBooking: '2024-01-10',
      phone: '+7 (900) 123-45-67',
      email: 'alexandr.petrov@email.com'
    },
    status: 'agent' as const,
    assignedAgent: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
    slaTimer: { remaining: 1800, status: 'normal' as const },
    sentiment: 'positive' as const,
    lastMessage: {
      text: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –•–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ',
      timestamp: '2024-01-15T14:30:00Z',
      sender: 'client' as const
    },
    unreadCount: 2,
    priority: 'high' as const,
    tags: ['VIP', 'Helicopter', 'Weekend']
  },
  {
    id: '2',
    channel: { type: 'telegram', icon: '‚úàÔ∏è', color: '#0088CC' },
    client: {
      id: 'c2',
      name: '–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞',
      avatar: '',
      tier: 'Premium',
      totalBookings: 8,
      lastBooking: '2023-12-22',
      phone: '+7 (905) 876-54-32',
      email: 'maria.kozlova@email.com'
    },
    status: 'bot' as const,
    slaTimer: { remaining: 600, status: 'warning' as const },
    sentiment: 'neutral' as const,
    lastMessage: {
      text: '–ï—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤?',
      timestamp: '2024-01-15T14:25:00Z',
      sender: 'client' as const
    },
    unreadCount: 1,
    priority: 'medium' as const,
    tags: ['Premium', 'Discount', 'Loyalty']
  },
  {
    id: '3',
    channel: { type: 'website', icon: 'üåê', color: '#6B7280' },
    client: {
      id: 'c3',
      name: '–î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤',
      avatar: '',
      tier: 'Standard',
      totalBookings: 2,
      lastBooking: '2023-08-15',
      phone: '+7 (912) 345-67-89',
      email: 'dmitry.ivanov@email.com'
    },
    status: 'pending' as const,
    slaTimer: { remaining: 120, status: 'critical' as const },
    sentiment: 'negative' as const,
    lastMessage: {
      text: '–û—á–µ–Ω—å –Ω–µ–¥–æ–≤–æ–ª–µ–Ω –æ—Ç–º–µ–Ω–æ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è! –¢—Ä–µ–±—É—é –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤',
      timestamp: '2024-01-15T14:20:00Z',
      sender: 'client' as const
    },
    unreadCount: 3,
    priority: 'high' as const,
    tags: ['Complaint', 'Refund', 'Cancellation']
  }
];

const mockMessages = [
  {
    id: 'm1',
    conversationId: '1',
    sender: 'client' as const,
    senderName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
    text: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–µ—Ä—Ç–æ–ª–µ—Ç–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è',
    timestamp: '2024-01-15T13:00:00Z',
    type: 'text' as const,
    isRead: true
  },
  {
    id: 'm2',
    conversationId: '1',
    sender: 'agent' as const,
    senderName: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
    text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–æ–Ω–µ—á–Ω–æ, —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ö–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?',
    timestamp: '2024-01-15T13:05:00Z',
    type: 'text' as const,
    isRead: true
  },
  {
    id: 'm3',
    conversationId: '1',
    sender: 'client' as const,
    senderName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
    text: '–°–ª–µ–¥—É—é—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–æ–¥–æ–π–¥—É—Ç. 20-21 —è–Ω–≤–∞—Ä—è',
    timestamp: '2024-01-15T13:10:00Z',
    type: 'text' as const,
    isRead: true
  },
  {
    id: 'm4',
    conversationId: '1',
    sender: 'agent' as const,
    senderName: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
    text: '–û—Ç–ª–∏—á–Ω–æ! –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å—É–±–±–æ—Ç—É –≤ 14:00 –∏ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 11:00. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ 45 –º–∏–Ω—É—Ç. –°—Ç–æ–∏–º–æ—Å—Ç—å 45,000 —Ä—É–±–ª–µ–π.',
    timestamp: '2024-01-15T13:15:00Z',
    type: 'text' as const,
    isRead: true
  },
  {
    id: 'm5',
    conversationId: '1',
    sender: 'client' as const,
    senderName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
    text: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –•–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ',
    timestamp: '2024-01-15T14:30:00Z',
    type: 'text' as const,
    isRead: false
  }
];

const mockAIInsights: Record<string, any> = {
  '1': {
    summary: 'VIP –∫–ª–∏–µ–Ω—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–µ—Ä—Ç–æ–ª–µ—Ç–Ω–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–º. –ì–æ—Ç–æ–≤ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.',
    intents: [
      { intent: 'Booking Request', confidence: 0.95, description: '–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é' },
      { intent: 'Weekend Preference', confidence: 0.87, description: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ' },
      { intent: 'Service Satisfaction', confidence: 0.92, description: '–í—ã—Ä–∞–∂–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º —Å–µ—Ä–≤–∏—Å–∞' }
    ],
    nextActions: [
      { action: 'Create Helicopter Booking', priority: 'high', description: '–°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ', eta: '15 –º–∏–Ω—É—Ç' },
      { action: 'Send Payment Link', priority: 'high', description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É', eta: '5 –º–∏–Ω—É—Ç' },
      { action: 'Follow-up Message', priority: 'medium', description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –¥–µ—Ç–∞–ª–∏', eta: '30 –º–∏–Ω—É—Ç' }
    ],
    sentiment: {
      score: 0.8,
      trend: 'improving',
      factors: ['–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ', '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é', 'VIP —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞']
    }
  }
};

const quickReplies = [
  '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.',
  '–ü—Ä–æ–≤–µ—Ä—é –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏ —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏.',
  '–û—Ç–ø—Ä–∞–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.',
  '–û—Ñ–æ—Ä–º–ª—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 30%.',
  '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –ü—Ä–µ–¥–ª–æ–∂—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.'
];

export function GTSCRMModuleComplete({ onBack, onNavigateToCalendar }: GTSCRMModuleCompleteProps) {
  const [activeTab, setActiveTab] = useState("leads");
  const [selectedLead, setSelectedLead] = useState<string | null>(null);
  const [selectedDeal, setSelectedDeal] = useState<string | null>(null);
  const [selectedClient, setSelectedClient] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [leadsFilter, setLeadsFilter] = useState({ source: "all", status: "all", date: "all" });
  const [clientsFilter, setClientsFilter] = useState({ category: "all", segment: "all", status: "all" });
  const [searchQuery, setSearchQuery] = useState("");
  
  // Modal states
  const [showNewLeadForm, setShowNewLeadForm] = useState(false);
  const [showNewDealForm, setShowNewDealForm] = useState(false);
  const [showAutomationBuilder, setShowAutomationBuilder] = useState(false);
  
  // Communications states
  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);
  const [newMessage, setNewMessage] = useState("");
  const [showAIInsights, setShowAIInsights] = useState(true);
  const [communicationsFilter, setCommunicationsFilter] = useState({ channel: "all", status: "all", sentiment: "all" });
  
  // Form handlers
  const handleNewLead = (data: any) => {
    console.log("New lead data:", data);
    // Here you would typically call an API to create the lead
  };
  
  const handleNewDeal = (data: any) => {
    console.log("New deal data:", data);
    // Here you would typically call an API to create the deal
  };
  
  const handleNewAutomation = (data: any) => {
    console.log("New automation data:", data);
    // Here you would typically call an API to create the automation
  };

  // Deal stages for Kanban
  const dealStages = [
    { id: "new", name: "–ù–æ–≤—ã–µ", color: "bg-gray-500" },
    { id: "qualified", name: "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã", color: "bg-blue-500" },
    { id: "offer", name: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", color: "bg-yellow-500" },
    { id: "prepaid", name: "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", color: "bg-orange-500" },
    { id: "completed", name: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", color: "bg-green-500" }
  ];

  const getStatusColor = (status: string) => {
    const colors = {
      hot: "text-red-400 bg-red-500/10",
      warm: "text-yellow-400 bg-yellow-500/10", 
      cold: "text-blue-400 bg-blue-500/10"
    };
    return colors[status as keyof typeof colors] || "text-gray-400 bg-gray-500/10";
  };

  const getCategoryColor = (category: string) => {
    const colors = {
      Enterprise: "text-purple-400 bg-purple-500/10",
      Premium: "text-yellow-400 bg-yellow-500/10",
      Standard: "text-blue-400 bg-blue-500/10"
    };
    return colors[category as keyof typeof colors] || "text-gray-400 bg-gray-500/10";
  };

  const filteredLeads = mockLeads.filter(lead => {
    const matchesSearch = lead.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         lead.company.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesSource = leadsFilter.source === "all" || lead.source.toLowerCase() === leadsFilter.source;
    const matchesStatus = leadsFilter.status === "all" || lead.status === leadsFilter.status;
    return matchesSearch && matchesSource && matchesStatus;
  });

  const filteredClients = mockClients.filter(client => {
    const matchesSearch = client.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         client.contact.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = clientsFilter.category === "all" || client.category === clientsFilter.category;
    const matchesSegment = clientsFilter.segment === "all" || client.segment === clientsFilter.segment;
    const matchesStatus = clientsFilter.status === "all" || client.status === clientsFilter.status;
    return matchesSearch && matchesCategory && matchesSegment && matchesStatus;
  });

  // Communications helper functions
  const formatTime = (timestamp: string) => {
    return new Date(timestamp).toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const formatSLATimer = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const getSentimentIcon = (sentiment: string) => {
    switch (sentiment) {
      case 'positive': return <Smile className="w-4 h-4 text-green-500" />;
      case 'negative': return <Frown className="w-4 h-4 text-red-500" />;
      default: return <Meh className="w-4 h-4 text-yellow-500" />;
    }
  };

  const getChannelIcon = (type: string) => {
    const icons = {
      whatsapp: 'üì±',
      telegram: '‚úàÔ∏è',
      instagram: 'üì∑',
      website: 'üåê',
      phone: 'üìû',
      email: 'üìß'
    };
    return icons[type as keyof typeof icons] || 'üí¨';
  };

  const filteredConversations = mockConversations.filter(conv => 
    conv.client.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    conv.lastMessage.text.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const selectedConv = mockConversations.find(c => c.id === selectedConversation);
  const conversationMessages = mockMessages.filter(m => m.conversationId === selectedConversation);
  const aiInsight = selectedConversation ? mockAIInsights[selectedConversation] : null;

  const handleSendMessage = () => {
    if (!newMessage.trim() || !selectedConversation) return;
    console.log('Sending message:', newMessage);
    setNewMessage('');
  };

  const renderLoadingState = () => (
    <div className="space-y-4">
      {[1, 2, 3].map(i => (
        <Card key={i} className="bg-[#17181A] border-[#232428]">
          <CardContent className="p-4">
            <div className="flex items-center space-x-4">
              <Skeleton className="h-12 w-12 rounded-full bg-[#232428]" />
              <div className="space-y-2">
                <Skeleton className="h-4 w-[250px] bg-[#232428]" />
                <Skeleton className="h-4 w-[200px] bg-[#232428]" />
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );

  const renderEmptyState = (title: string, description: string) => (
    <Card className="bg-[#17181A] border-[#232428]">
      <CardContent className="p-12 text-center">
        <AlertCircle className="h-12 w-12 mx-auto mb-4 text-[#A6A7AA]" />
        <h3 className="text-lg font-heading text-white mb-2">{title}</h3>
        <p className="text-[#A6A7AA] mb-4">{description}</p>
        <Button className="bg-[#91040C] hover:bg-[#91040C]/90">
          <Plus className="h-4 w-4 mr-2" />
          –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        </Button>
      </CardContent>
    </Card>
  );

  return (
    <div className="min-h-screen bg-[#0B0B0C]">
      {/* Header */}
      <div className="border-b bg-[#121214] border-[#232428]">
        <div className="flex items-center justify-between px-6 py-4">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" onClick={onBack} className="text-white hover:bg-[#17181A]">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –í –ø–æ—Ä—Ç–∞–ª
            </Button>
            <div>
              <h1 className="text-2xl font-heading text-white">
                CRM - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
              </h1>
              <p className="text-sm text-[#A6A7AA]">
                –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞–º–∏, —Å–¥–µ–ª–∫–∞–º–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Button 
              onClick={onNavigateToCalendar}
              className="bg-blue-500 hover:bg-blue-600"
            >
              <Calendar className="h-4 w-4 mr-2" />
              –ö–∞–ª–µ–Ω–¥–∞—Ä—å
            </Button>
            <Button onClick={() => setShowNewLeadForm(true)} className="bg-[#91040C] hover:bg-[#91040C]/90">
              <Plus className="h-4 w-4 mr-2" />
              –ù–æ–≤—ã–π –ª–∏–¥
            </Button>
          </div>
        </div>
      </div>

      <div className="p-6">
        {/* Stats Dashboard */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <Card className="bg-[#121214] border-[#232428]">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-[#A6A7AA]">–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂</p>
                  <p className="text-2xl font-heading text-white">‚ÇΩ1.35M</p>
                  <p className="text-xs text-green-400">+12.5% –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É</p>
                </div>
                <TrendingUp className="h-8 w-8 text-green-400" />
              </div>
            </CardContent>
          </Card>
          
          <Card className="bg-[#121214] border-[#232428]">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-[#A6A7AA]">–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥—ã</p>
                  <p className="text-2xl font-heading text-white">47</p>
                  <p className="text-xs text-blue-400">23 –≥–æ—Ä—è—á–∏—Ö</p>
                </div>
                <User className="h-8 w-8 text-red-400" />
              </div>
            </CardContent>
          </Card>
          
          <Card className="bg-[#121214] border-[#232428]">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-[#A6A7AA]">–ö–æ–Ω–≤–µ—Ä—Å–∏—è</p>
                  <p className="text-2xl font-heading text-white">34.2%</p>
                  <p className="text-xs text-green-400">+2.1% –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É</p>
                </div>
                <Target className="h-8 w-8 text-yellow-400" />
              </div>
            </CardContent>
          </Card>
          
          <Card className="bg-[#121214] border-[#232428]">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-[#A6A7AA]">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</p>
                  <p className="text-2xl font-heading text-white">‚ÇΩ285K</p>
                  <p className="text-xs text-green-400">+8.3% –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É</p>
                </div>
                <DollarSign className="h-8 w-8 text-emerald-400" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-6 bg-[#121214] border-[#232428]">
            <TabsTrigger value="leads" className="data-[state=active]:bg-[#17181A] data-[state=active]:text-white">
              –õ–∏–¥—ã
            </TabsTrigger>
            <TabsTrigger value="deals" className="data-[state=active]:bg-[#17181A] data-[state=active]:text-white">
              –°–¥–µ–ª–∫–∏
            </TabsTrigger>
            <TabsTrigger value="clients" className="data-[state=active]:bg-[#17181A] data-[state=active]:text-white">
              –ö–ª–∏–µ–Ω—Ç—ã
            </TabsTrigger>
            <TabsTrigger value="communications" className="data-[state=active]:bg-[#17181A] data-[state=active]:text-white">
              <MessageSquare className="w-4 h-4 mr-1" />
              –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
            </TabsTrigger>
            <TabsTrigger value="automations" className="data-[state=active]:bg-[#17181A] data-[state=active]:text-white">
              –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
            </TabsTrigger>
            <TabsTrigger value="analytics" className="data-[state=active]:bg-[#17181A] data-[state=active]:text-white">
              –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            </TabsTrigger>
          </TabsList>

          {/* Leads Tab */}
          <TabsContent value="leads" className="mt-6">
            <div className="flex flex-col lg:flex-row gap-6">
              <div className="flex-1">
                <Card className="bg-[#121214] border-[#232428]">
                  <CardHeader className="pb-4">
                    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                      <CardTitle className="text-white">–ë–∞–∑–∞ –ª–∏–¥–æ–≤</CardTitle>
                      <div className="flex flex-col sm:flex-row gap-2">
                        <div className="relative">
                          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-[#A6A7AA]" />
                          <Input 
                            placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏..." 
                            className="pl-10 bg-[#17181A] border-[#232428] text-white placeholder:text-[#A6A7AA] w-full sm:w-64"
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                          />
                        </div>
                        <div className="flex gap-2">
                          <Select value={leadsFilter.source} onValueChange={(value) => setLeadsFilter({...leadsFilter, source: value})}>
                            <SelectTrigger className="w-[140px] bg-[#17181A] border-[#232428] text-white">
                              <SelectValue placeholder="–ò—Å—Ç–æ—á–Ω–∏–∫" />
                            </SelectTrigger>
                            <SelectContent className="bg-[#17181A] border-[#232428]">
                              <SelectItem value="all">–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</SelectItem>
                              <SelectItem value="website">Website</SelectItem>
                              <SelectItem value="referral">Referral</SelectItem>
                              <SelectItem value="social media">Social Media</SelectItem>
                            </SelectContent>
                          </Select>
                          <Select value={leadsFilter.status} onValueChange={(value) => setLeadsFilter({...leadsFilter, status: value})}>
                            <SelectTrigger className="w-[120px] bg-[#17181A] border-[#232428] text-white">
                              <SelectValue placeholder="–°—Ç–∞—Ç—É—Å" />
                            </SelectTrigger>
                            <SelectContent className="bg-[#17181A] border-[#232428]">
                              <SelectItem value="all">–í—Å–µ</SelectItem>
                              <SelectItem value="hot">–ì–æ—Ä—è—á–∏–µ</SelectItem>
                              <SelectItem value="warm">–¢–µ–ø–ª—ã–µ</SelectItem>
                              <SelectItem value="cold">–•–æ–ª–æ–¥–Ω—ã–µ</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    {isLoading ? (
                      renderLoadingState()
                    ) : filteredLeads.length === 0 ? (
                      renderEmptyState("–õ–∏–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏–¥")
                    ) : (
                      <div className="space-y-3">
                        {filteredLeads.map(lead => (
                          <Card 
                            key={lead.id}
                            className="bg-[#17181A] border-[#232428] cursor-pointer hover:bg-[#1A1B1D] transition-colors"
                            onClick={() => setSelectedLead(lead.id)}
                          >
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-4">
                                  <Avatar className="h-12 w-12">
                                    <AvatarFallback className="bg-[#232428] text-white">
                                      {lead.name.split(' ').map(n => n[0]).join('')}
                                    </AvatarFallback>
                                  </Avatar>
                                  <div>
                                    <h4 className="font-heading text-white">{lead.name}</h4>
                                    <p className="text-sm text-[#A6A7AA]">{lead.company}</p>
                                    <div className="flex items-center gap-2 mt-1">
                                      <Badge className={`text-xs ${getStatusColor(lead.status)}`}>
                                        {lead.status.toUpperCase()}
                                      </Badge>
                                      <span className="text-xs text-[#A6A7AA]">{lead.source}</span>
                                    </div>
                                  </div>
                                </div>
                                <div className="text-right">
                                  <div className="flex items-center gap-2 mb-2">
                                    <span className="text-sm text-white">Score: {lead.score}</span>
                                    <Progress value={lead.score} className="w-16" />
                                  </div>
                                  <p className="text-xs text-[#A6A7AA]">–í–ª–∞–¥–µ–ª–µ—Ü: {lead.owner}</p>
                                  <p className="text-xs text-[#A6A7AA]">{lead.createdAt}</p>
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>

              {/* Lead Detail Drawer */}
              {selectedLead && (
                <div className="lg:w-80">
                  <Card className="bg-[#121214] border-[#232428]">
                    <CardHeader className="pb-4">
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-white">–î–µ—Ç–∞–ª–∏ –ª–∏–¥–∞</CardTitle>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          onClick={() => setSelectedLead(null)}
                          className="text-[#A6A7AA] hover:text-white"
                        >
                          √ó
                        </Button>
                      </div>
                    </CardHeader>
                    <CardContent>
                      {mockLeads.find(l => l.id === selectedLead) && (
                        <div className="space-y-6">
                          {(() => {
                            const lead = mockLeads.find(l => l.id === selectedLead)!;
                            return (
                              <>
                                {/* Lead Info */}
                                <div className="text-center">
                                  <Avatar className="h-16 w-16 mx-auto mb-3">
                                    <AvatarFallback className="bg-[#232428] text-white text-lg">
                                      {lead.name.split(' ').map(n => n[0]).join('')}
                                    </AvatarFallback>
                                  </Avatar>
                                  <h3 className="font-heading text-white">{lead.name}</h3>
                                  <p className="text-sm text-[#A6A7AA]">{lead.company}</p>
                                  <Badge className={`mt-2 ${getStatusColor(lead.status)}`}>
                                    {lead.status.toUpperCase()} ‚Ä¢ {lead.score}%
                                  </Badge>
                                </div>

                                <Separator className="bg-[#232428]" />

                                {/* Contact Info */}
                                <div className="space-y-3">
                                  <h4 className="font-medium text-white">–ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
                                  <div className="space-y-2">
                                    <div className="flex items-center gap-2">
                                      <Mail className="h-4 w-4 text-[#A6A7AA]" />
                                      <span className="text-sm text-white">{lead.email}</span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                      <Phone className="h-4 w-4 text-[#A6A7AA]" />
                                      <span className="text-sm text-white">{lead.phone}</span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                      <Clock className="h-4 w-4 text-[#A6A7AA]" />
                                      <span className="text-sm text-white">{lead.lastActivity}</span>
                                    </div>
                                  </div>
                                </div>

                                <Separator className="bg-[#232428]" />

                                {/* Quick Actions */}
                                <div className="space-y-3">
                                  <h4 className="font-medium text-white">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h4>
                                  <div className="grid grid-cols-2 gap-2">
                                    <Button 
                                      size="sm" 
                                      className="bg-blue-500 hover:bg-blue-600"
                                      onClick={onNavigateToCalendar}
                                    >
                                      <Calendar className="h-4 w-4 mr-1" />
                                      –í—Å—Ç—Ä–µ—á–∞
                                    </Button>
                                    <Button size="sm" variant="outline" className="border-[#232428] text-white hover:bg-[#17181A]">
                                      <Phone className="h-4 w-4 mr-1" />
                                      –ó–≤–æ–Ω–æ–∫
                                    </Button>
                                    <Button size="sm" className="bg-green-500 hover:bg-green-600">
                                      <Plus className="h-4 w-4 mr-1" />
                                      –°–¥–µ–ª–∫–∞
                                    </Button>
                                    <Button size="sm" variant="outline" className="border-[#232428] text-white hover:bg-[#17181A]">
                                      <Mail className="h-4 w-4 mr-1" />
                                      Email
                                    </Button>
                                  </div>
                                </div>

                                <Separator className="bg-[#232428]" />

                                {/* Communication History */}
                                <div className="space-y-3">
                                  <h4 className="font-medium text-white">–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π</h4>
                                  <div className="space-y-3">
                                    {lead.activities?.map((activity, index) => (
                                      <div key={index} className="flex items-start gap-3">
                                        <div className={`w-2 h-2 rounded-full mt-2 ${
                                          activity.status === 'completed' ? 'bg-green-400' : 
                                          activity.status === 'scheduled' ? 'bg-blue-400' : 'bg-yellow-400'
                                        }`} />
                                        <div className="flex-1">
                                          <p className="text-sm text-white">{activity.title}</p>
                                          <p className="text-xs text-[#A6A7AA]">{activity.date}</p>
                                        </div>
                                      </div>
                                    ))}
                                  </div>
                                </div>

                                {/* Notes */}
                                {lead.notes && (
                                  <>
                                    <Separator className="bg-[#232428]" />
                                    <div className="space-y-2">
                                      <h4 className="font-medium text-white">–ó–∞–º–µ—Ç–∫–∏</h4>
                                      <p className="text-sm text-[#A6A7AA]">{lead.notes}</p>
                                    </div>
                                  </>
                                )}
                              </>
                            );
                          })()}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              )}
            </div>
          </TabsContent>

          {/* Deals Tab - Kanban Board */}
          <TabsContent value="deals" className="mt-6">
            <Card className="bg-[#121214] border-[#232428] mb-4">
              <CardHeader className="pb-4">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-white">–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂</CardTitle>
                  <Button className="bg-[#91040C] hover:bg-[#91040C]/90">
                    <Plus className="h-4 w-4 mr-2" />
                    –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞
                  </Button>
                </div>
              </CardHeader>
            </Card>

            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
              {dealStages.map((stage) => (
                <Card key={stage.id} className="bg-[#121214] border-[#232428]">
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-sm text-white capitalize">
                        {stage.name}
                      </CardTitle>
                      <Badge className={`${stage.color} text-white text-xs`}>
                        {mockDeals.filter(deal => deal.stage === stage.id).length}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {mockDeals.length === 0 ? (
                      <div className="text-center py-8">
                        <AlertCircle className="h-8 w-8 mx-auto mb-2 text-[#A6A7AA]" />
                        <p className="text-sm text-[#A6A7AA]">–ù–µ—Ç —Å–¥–µ–ª–æ–∫</p>
                      </div>
                    ) : (
                      mockDeals
                        .filter(deal => deal.stage === stage.id)
                        .map(deal => (
                          <Card 
                            key={deal.id} 
                            className="bg-[#17181A] border-[#232428] cursor-pointer hover:bg-[#1A1B1D] transition-colors"
                            onClick={() => setSelectedDeal(deal.id)}
                          >
                            <CardContent className="p-4">
                              <div className="space-y-2">
                                <h4 className="font-heading text-white text-sm">
                                  {deal.title}
                                </h4>
                                <p className="text-xs text-[#A6A7AA]">
                                  {deal.client}
                                </p>
                                <div className="flex items-center justify-between">
                                  <span className="text-sm font-heading text-green-400">
                                    ‚ÇΩ{(deal.value / 1000).toFixed(0)}K
                                  </span>
                                  <Badge variant="secondary" className="text-xs bg-[#232428] text-white">
                                    {deal.probability}%
                                  </Badge>
                                </div>
                                <div className="flex items-center gap-2 text-xs text-[#A6A7AA]">
                                  <Calendar className="h-3 w-3" />
                                  {deal.closeDate}
                                </div>
                                <div className="flex items-center gap-2 text-xs text-[#A6A7AA]">
                                  <User className="h-3 w-3" />
                                  {deal.owner}
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Clients Tab */}
          <TabsContent value="clients" className="mt-6">
            <Card className="bg-[#121214] border-[#232428]">
              <CardHeader className="pb-4">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                  <CardTitle className="text-white">–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤</CardTitle>
                  <div className="flex flex-col sm:flex-row gap-2">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-[#A6A7AA]" />
                      <Input 
                        placeholder="–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤..." 
                        className="pl-10 bg-[#17181A] border-[#232428] text-white placeholder:text-[#A6A7AA] w-full sm:w-64"
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                      />
                    </div>
                    <Select value={clientsFilter.category} onValueChange={(value) => setClientsFilter({...clientsFilter, category: value})}>
                      <SelectTrigger className="w-[140px] bg-[#17181A] border-[#232428] text-white">
                        <SelectValue placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#17181A] border-[#232428]">
                        <SelectItem value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</SelectItem>
                        <SelectItem value="Enterprise">Enterprise</SelectItem>
                        <SelectItem value="Premium">Premium</SelectItem>
                        <SelectItem value="Standard">Standard</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  renderLoadingState()
                ) : filteredClients.length === 0 ? (
                  renderEmptyState("–ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")
                ) : (
                  <div className="space-y-4">
                    {filteredClients.map(client => (
                      <Card 
                        key={client.id}
                        className="bg-[#17181A] border-[#232428] cursor-pointer hover:bg-[#1A1B1D] transition-colors"
                        onClick={() => setSelectedClient(client.id)}
                      >
                        <CardContent className="p-6">
                          <div className="grid grid-cols-1 md:grid-cols-6 gap-4 items-center">
                            <div className="md:col-span-2">
                              <div className="flex items-center gap-3">
                                <Avatar className="h-12 w-12">
                                  <AvatarFallback className="bg-[#232428] text-white">
                                    {client.name.split(' ').map(n => n[0]).join('')}
                                  </AvatarFallback>
                                </Avatar>
                                <div>
                                  <h3 className="font-heading text-white">{client.name}</h3>
                                  <p className="text-sm text-[#A6A7AA]">{client.contact}</p>
                                </div>
                              </div>
                            </div>
                            <div className="text-center">
                              <p className="text-lg font-heading text-green-400">‚ÇΩ{(client.ltv / 1000).toFixed(0)}K</p>
                              <p className="text-xs text-[#A6A7AA]">LTV</p>
                            </div>
                            <div className="text-center">
                              <p className="text-lg font-heading text-white">{client.totalBookings}</p>
                              <p className="text-xs text-[#A6A7AA]">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</p>
                            </div>
                            <div className="text-center">
                              <Badge className={getCategoryColor(client.category)}>
                                {client.category}
                              </Badge>
                              <p className="text-xs text-[#A6A7AA] mt-1">{client.lastActivity}</p>
                            </div>
                            <div className="flex gap-2 justify-center">
                              <Button 
                                size="sm" 
                                onClick={(e) => {
                                  e.stopPropagation();
                                  onNavigateToCalendar();
                                }}
                                className="bg-blue-500 hover:bg-blue-600"
                              >
                                <Calendar className="h-4 w-4 mr-1" />
                                –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                              </Button>
                              <Button 
                                variant="outline" 
                                size="sm"
                                className="border-[#232428] text-white hover:bg-[#17181A]"
                              >
                                <Eye className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Client Profile Modal/Sheet */}
            {selectedClient && (
              <Sheet open={!!selectedClient} onOpenChange={() => setSelectedClient(null)}>
                <SheetContent className="bg-[#0B0B0C] border-[#232428] text-white w-full sm:max-w-lg">
                  <SheetHeader>
                    <SheetTitle className="text-white">–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞</SheetTitle>
                    <SheetDescription className="text-[#A6A7AA]">
                      –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –∏—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
                    </SheetDescription>
                  </SheetHeader>
                  {mockClients.find(c => c.id === selectedClient) && (
                    <div className="mt-6 space-y-6">
                      {(() => {
                        const client = mockClients.find(c => c.id === selectedClient)!;
                        return (
                          <Tabs defaultValue="overview" className="w-full">
                            <TabsList className="grid w-full grid-cols-4 bg-[#121214]">
                              <TabsTrigger value="overview" className="data-[state=active]:bg-[#17181A]">–û–±–∑–æ—Ä</TabsTrigger>
                              <TabsTrigger value="bookings" className="data-[state=active]:bg-[#17181A]">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</TabsTrigger>
                              <TabsTrigger value="loyalty" className="data-[state=active]:bg-[#17181A]">–õ–æ—è–ª—å–Ω–æ—Å—Ç—å</TabsTrigger>
                              <TabsTrigger value="documents" className="data-[state=active]:bg-[#17181A]">–î–æ–∫—É–º–µ–Ω—Ç—ã</TabsTrigger>
                            </TabsList>
                            
                            <TabsContent value="overview" className="space-y-4">
                              <Card className="bg-[#121214] border-[#232428]">
                                <CardContent className="p-4">
                                  <div className="space-y-4">
                                    <div className="text-center">
                                      <Avatar className="h-16 w-16 mx-auto mb-2">
                                        <AvatarFallback className="bg-[#232428] text-white text-lg">
                                          {client.name.split(' ').map(n => n[0]).join('')}
                                        </AvatarFallback>
                                      </Avatar>
                                      <h3 className="font-heading text-white">{client.name}</h3>
                                      <p className="text-sm text-[#A6A7AA]">{client.contact}</p>
                                    </div>
                                    
                                    <Separator className="bg-[#232428]" />
                                    
                                    <div className="grid grid-cols-2 gap-4">
                                      <div className="text-center">
                                        <p className="text-2xl font-heading text-green-400">‚ÇΩ{(client.ltv / 1000).toFixed(0)}K</p>
                                        <p className="text-xs text-[#A6A7AA]">Lifetime Value</p>
                                      </div>
                                      <div className="text-center">
                                        <p className="text-2xl font-heading text-white">{client.totalBookings}</p>
                                        <p className="text-xs text-[#A6A7AA]">–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</p>
                                      </div>
                                    </div>
                                    
                                    <div className="space-y-2">
                                      <div className="flex items-center gap-2">
                                        <Mail className="h-4 w-4 text-[#A6A7AA]" />
                                        <span className="text-sm text-white">{client.email}</span>
                                      </div>
                                      <div className="flex items-center gap-2">
                                        <Phone className="h-4 w-4 text-[#A6A7AA]" />
                                        <span className="text-sm text-white">{client.phone}</span>
                                      </div>
                                      <div className="flex items-center gap-2">
                                        <Calendar className="h-4 w-4 text-[#A6A7AA]" />
                                        <span className="text-sm text-white">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {client.registrationDate}</span>
                                      </div>
                                    </div>
                                  </div>
                                </CardContent>
                              </Card>
                            </TabsContent>
                            
                            <TabsContent value="bookings">
                              <Card className="bg-[#121214] border-[#232428]">
                                <CardContent className="p-4 text-center">
                                  <Building2 className="h-12 w-12 mx-auto mb-4 text-[#A6A7AA]" />
                                  <p className="text-[#A6A7AA]">–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –±—É–¥–µ—Ç –∑–¥–µ—Å—å</p>
                                </CardContent>
                              </Card>
                            </TabsContent>
                            
                            <TabsContent value="loyalty">
                              <Card className="bg-[#121214] border-[#232428]">
                                <CardContent className="p-4">
                                  <div className="text-center">
                                    <Star className="h-12 w-12 mx-auto mb-4 text-yellow-400" />
                                    <p className="text-2xl font-heading text-yellow-400">{client.loyaltyPoints}</p>
                                    <p className="text-sm text-[#A6A7AA]">–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã</p>
                                  </div>
                                </CardContent>
                              </Card>
                            </TabsContent>
                            
                            <TabsContent value="documents">
                              <Card className="bg-[#121214] border-[#232428]">
                                <CardContent className="p-4 text-center">
                                  <FileText className="h-12 w-12 mx-auto mb-4 text-[#A6A7AA]" />
                                  <p className="text-[#A6A7AA]">–î–æ–∫—É–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥—É—Ç –∑–¥–µ—Å—å</p>
                                </CardContent>
                              </Card>
                            </TabsContent>
                          </Tabs>
                        );
                      })()}
                    </div>
                  )}
                </SheetContent>
              </Sheet>
            )}
          </TabsContent>

          {/* Automations Tab */}
          <TabsContent value="automations" className="mt-6">
            <div className="space-y-6">
              <Card className="bg-[#121214] border-[#232428]">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle className="text-white">–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞</CardTitle>
                      <CardDescription className="text-[#A6A7AA]">
                        If/Then –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
                      </CardDescription>
                    </div>
                    <Button className="bg-[#91040C] hover:bg-[#91040C]/90">
                      <Plus className="h-4 w-4 mr-2" />
                      –ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {mockAutomations.length === 0 ? (
                      <div className="col-span-2">
                        {renderEmptyState("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π", "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏")}
                      </div>
                    ) : (
                      mockAutomations.map((automation) => (
                        <Card key={automation.id} className="bg-[#17181A] border-[#232428]">
                          <CardContent className="p-6">
                            <div className="flex items-start justify-between mb-4">
                              <div className="flex items-center gap-2">
                                <Zap className="h-5 w-5 text-yellow-400" />
                                <h4 className="font-heading text-white">{automation.name}</h4>
                              </div>
                              <div className="flex items-center gap-2">
                                {automation.status === 'active' ? (
                                  <Badge className="bg-green-500/10 text-green-400">
                                    <PlayCircle className="h-3 w-3 mr-1" />
                                    –ê–∫—Ç–∏–≤–Ω–æ
                                  </Badge>
                                ) : (
                                  <Badge className="bg-yellow-500/10 text-yellow-400">
                                    <PauseCircle className="h-3 w-3 mr-1" />
                                    –ü–∞—É–∑–∞
                                  </Badge>
                                )}
                              </div>
                            </div>
                            
                            <p className="text-sm text-[#A6A7AA] mb-4">{automation.description}</p>
                            
                            <div className="space-y-3">
                              <div className="p-3 bg-[#0B0B0C] rounded-lg">
                                <div className="flex items-center gap-2 mb-2">
                                  <Target className="h-4 w-4 text-blue-400" />
                                  <span className="text-sm font-medium text-white">–ï–°–õ–ò</span>
                                </div>
                                <p className="text-sm text-[#A6A7AA]">{automation.trigger}</p>
                              </div>
                              
                              <div className="p-3 bg-[#0B0B0C] rounded-lg">
                                <div className="flex items-center gap-2 mb-2">
                                  <Zap className="h-4 w-4 text-green-400" />
                                  <span className="text-sm font-medium text-white">–¢–û</span>
                                </div>
                                <p className="text-sm text-[#A6A7AA]">{automation.action}</p>
                              </div>
                            </div>
                            
                            <Separator className="bg-[#232428] my-4" />
                            
                            <div className="grid grid-cols-3 gap-4 text-center">
                              <div>
                                <p className="text-lg font-heading text-white">{automation.triggersToday}</p>
                                <p className="text-xs text-[#A6A7AA]">–°–µ–≥–æ–¥–Ω—è</p>
                              </div>
                              <div>
                                <p className="text-lg font-heading text-green-400">{automation.conversions}</p>
                                <p className="text-xs text-[#A6A7AA]">–ö–æ–Ω–≤–µ—Ä—Å–∏–π</p>
                              </div>
                              <div>
                                <p className="text-lg font-heading text-blue-400">{automation.conversionRate.toFixed(1)}%</p>
                                <p className="text-xs text-[#A6A7AA]">–ö–æ–Ω–≤–µ—Ä—Å–∏—è</p>
                              </div>
                            </div>
                            
                            <div className="flex justify-between mt-4">
                              <Button variant="outline" size="sm" className="border-[#232428] text-white hover:bg-[#232428]">
                                <Edit className="h-4 w-4 mr-2" />
                                –ò–∑–º–µ–Ω–∏—Ç—å
                              </Button>
                              <Button 
                                variant="outline" 
                                size="sm"
                                className={automation.status === 'active' ? 
                                  'border-yellow-500 text-yellow-400 hover:bg-yellow-500/10' : 
                                  'border-green-500 text-green-400 hover:bg-green-500/10'
                                }
                              >
                                {automation.status === 'active' ? (
                                  <>
                                    <PauseCircle className="h-4 w-4 mr-2" />
                                    –ü–∞—É–∑–∞
                                  </>
                                ) : (
                                  <>
                                    <PlayCircle className="h-4 w-4 mr-2" />
                                    –ó–∞–ø—É—Å—Ç–∏—Ç—å
                                  </>
                                )}
                              </Button>
                            </div>
                          </CardContent>
                        </Card>
                      ))
                    )}
                  </div>
                </CardContent>
              </Card>
              
              {/* Templates Section */}
              <Card className="bg-[#121214] border-[#232428]">
                <CardHeader>
                  <CardTitle className="text-white">–®–∞–±–ª–æ–Ω—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π</CardTitle>
                  <CardDescription className="text-[#A6A7AA]">
                    –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è email, WhatsApp –∏ —á–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏–π
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {[
                      { type: "email", title: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ", usage: 45, icon: Mail },
                      { type: "whatsapp", title: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ", usage: 23, icon: MessageSquare },
                      { type: "chat", title: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", usage: 12, icon: MessageSquare }
                    ].map((template, index) => (
                      <Card key={index} className="bg-[#17181A] border-[#232428]">
                        <CardContent className="p-4">
                          <div className="flex items-center gap-3 mb-3">
                            <template.icon className="h-5 w-5 text-blue-400" />
                            <div>
                              <h4 className="font-medium text-white">{template.title}</h4>
                              <p className="text-xs text-[#A6A7AA] capitalize">{template.type}</p>
                            </div>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-[#A6A7AA]">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {template.usage}</span>
                            <Button variant="ghost" size="sm" className="text-blue-400 hover:bg-blue-500/10">
                              <Edit className="h-4 w-4" />
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Analytics Tab */}
          <TabsContent value="analytics" className="mt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card className="bg-[#121214] border-[#232428]">
                <CardHeader>
                  <CardTitle className="text-white">–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {[
                      { stage: "–õ–∏–¥—ã", count: 147, conversion: 100, color: "bg-blue-500" },
                      { stage: "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã", count: 98, conversion: 66.7, color: "bg-green-500" },
                      { stage: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", count: 45, conversion: 30.6, color: "bg-yellow-500" },
                      { stage: "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", count: 23, conversion: 15.6, color: "bg-orange-500" },
                      { stage: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", count: 12, conversion: 8.2, color: "bg-emerald-500" }
                    ].map((item, index) => (
                      <div key={index}>
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-sm text-white">{item.stage}</span>
                          <span className="text-sm text-[#A6A7AA]">{item.count} ({item.conversion}%)</span>
                        </div>
                        <Progress value={item.conversion} className="h-2" />
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-[#121214] border-[#232428]">
                <CardHeader>
                  <CardTitle className="text-white">–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ª–∏–¥–æ–≤</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {[
                      { source: "Website", count: 67, percentage: 45.6, color: "bg-blue-500" },
                      { source: "Referrals", count: 34, percentage: 23.1, color: "bg-green-500" },
                      { source: "Social Media", count: 28, percentage: 19.0, color: "bg-purple-500" },
                      { source: "Partners", count: 18, percentage: 12.2, color: "bg-yellow-500" }
                    ].map((item, index) => (
                      <div key={index} className="flex justify-between items-center">
                        <div className="flex items-center gap-2">
                          <div className={`w-3 h-3 rounded-full ${item.color}`} />
                          <span className="text-sm text-white">{item.source}</span>
                        </div>
                        <div className="text-right">
                          <span className="text-sm text-white">{item.count}</span>
                          <span className="text-xs text-[#A6A7AA] ml-1">({item.percentage}%)</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}