import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "../ui/card";
import { Button } from "../ui/button";
import { Badge } from "../ui/badge";
import { Input } from "../ui/input";
import { Textarea } from "../ui/textarea";
import { Avatar, AvatarFallback, AvatarImage } from "../ui/avatar";
import { Separator } from "../ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "../ui/dialog";
import { 
  Users, MessageCircle, Heart, Share2, Calendar, MapPin, Star,
  Plus, Search, Filter, Send, Bell, Settings, Crown, Award,
  Trophy, Camera, Video, Image, Gift, Sparkles, Clock,
  ThumbsUp, MessageSquareReply, Bookmark, Flag, MoreHorizontal,
  UserPlus, UserMinus, Eye, Edit, Trash2, ChevronRight
} from "lucide-react";

interface GTSSocialTierFeaturesProps {
  currentUser: {
    id: string;
    name: string;
    tier: 'bronze' | 'silver' | 'gold' | 'platinum';
    membershipId: string;
    avatar: string;
    joinDate: string;
    totalSpent: number;
  };
}

// Tier colors
const tierColors = {
  bronze: { bg: "#8C6239", text: "#FFFFFF", light: "#B8804D" },
  silver: { bg: "#C0C0C0", text: "#000000", light: "#D4D4D4" },
  gold: { bg: "#FFD700", text: "#000000", light: "#FFE55C" },
  platinum: { bg: "#E5E4E2", text: "#000000", light: "#F0EFED" }
};

interface SocialPost {
  id: string;
  author: {
    id: string;
    name: string;
    tier: string;
    avatar: string;
    membershipId: string;
  };
  content: string;
  images?: string[];
  video?: string;
  type: 'text' | 'experience' | 'review' | 'photo' | 'event';
  experienceData?: {
    service: string;
    rating: number;
    location: string;
    date: string;
    cost: number;
  };
  createdAt: string;
  likes: number;
  comments: number;
  shares: number;
  isLiked: boolean;
  isBookmarked: boolean;
  tags: string[];
  visibility: 'public' | 'tier-only' | 'private';
}

interface TierMember {
  id: string;
  name: string;
  tier: string;
  avatar: string;
  membershipId: string;
  joinDate: string;
  totalSpent: number;
  lastSeen: string;
  isOnline: boolean;
  mutualConnections: number;
  commonInterests: string[];
  connectionStatus: 'none' | 'requested' | 'connected' | 'blocked';
}

interface SocialEvent {
  id: string;
  title: string;
  description: string;
  type: 'meetup' | 'exclusive' | 'experience' | 'celebration';
  organizer: {
    name: string;
    tier: string;
    avatar: string;
  };
  date: string;
  time: string;
  location: string;
  maxAttendees: number;
  currentAttendees: number;
  attendees: string[];
  tierRequirement: string;
  cost: number;
  tags: string[];
  images: string[];
  isAttending: boolean;
  waitingList: number;
}

// Mock social data
const mockPosts: SocialPost[] = [
  {
    id: "post-001",
    author: {
      id: "member-002",
      name: "–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞",
      tier: "gold",
      avatar: "–ú–ö",
      membershipId: "GTS-GLD-047"
    },
    content: "–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π –¥–µ–Ω—å –Ω–∞ —è—Ö—Ç–µ! –ö–æ–º–∞–Ω–¥–∞ GTS –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª–∞ –≤—Å–µ –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º Gold+ üõ•Ô∏è‚ú®",
    images: ["yacht1.jpg", "yacht2.jpg"],
    type: "experience",
    experienceData: {
      service: "–Ø—Ö—Ç–∞ Azimut 68S",
      rating: 5,
      location: "–ú–∞—Ä–∏–Ω–∞ –°–æ—á–∏",
      date: "2024-12-01",
      cost: 89000
    },
    createdAt: "2024-12-01T18:30:00Z",
    likes: 24,
    comments: 8,
    shares: 3,
    isLiked: true,
    isBookmarked: false,
    tags: ["—è—Ö—Ç–∞", "—Å–æ—á–∏", "–æ—Ç–¥—ã—Ö", "–º–æ—Ä–µ"],
    visibility: "tier-only"
  },
  {
    id: "post-002",
    author: {
      id: "member-001",
      name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
      tier: "platinum",
      avatar: "–ê–ü",
      membershipId: "GTS-PLT-001"
    },
    content: "–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –≤–µ—Ä—Ç–æ–ª–µ—Ç–Ω–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞–¥ –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω–æ–π. –í–∏–¥—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ! –î–ª—è –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—ã–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –∏ —à–∞–º–ø–∞–Ω—Å–∫–æ–µ –Ω–∞ –±–æ—Ä—Ç—É ü•Ç",
    type: "review",
    experienceData: {
      service: "–í–µ—Ä—Ç–æ–ª–µ—Ç–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è VIP",
      rating: 5,
      location: "–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞",
      date: "2024-11-28",
      cost: 125000
    },
    createdAt: "2024-11-28T20:15:00Z",
    likes: 42,
    comments: 15,
    shares: 7,
    isLiked: false,
    isBookmarked: true,
    tags: ["–≤–µ—Ä—Ç–æ–ª–µ—Ç", "–∫—Ä–∞—Å–Ω–∞—è –ø–æ–ª—è–Ω–∞", "vip", "—ç–∫—Å–∫—É—Ä—Å–∏—è"],
    visibility: "public"
  },
  {
    id: "post-003",
    author: {
      id: "member-003",
      name: "–î–º–∏—Ç—Ä–∏–π –°–æ–∫–æ–ª–æ–≤",
      tier: "silver",
      avatar: "–î–°",
      membershipId: "GTS-SLV-128"
    },
    content: "–û—Ä–≥–∞–Ω–∏–∑—É–µ–º –≤—Å—Ç—Ä–µ—á—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ Silver —É—Ä–æ–≤–Ω—è! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –æ–ø—ã—Ç –∏ –ø–æ–¥–µ–ª–∏–º—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –∑–∞ –±–æ–∫–∞–ª–æ–º —Ö–æ—Ä–æ—à–µ–≥–æ –≤–∏–Ω–∞ üç∑",
    type: "event",
    createdAt: "2024-11-25T16:45:00Z",
    likes: 18,
    comments: 12,
    shares: 2,
    isLiked: false,
    isBookmarked: false,
    tags: ["–≤—Å—Ç—Ä–µ—á–∞", "silver", "—Å–æ—á–∏", "networking"],
    visibility: "tier-only"
  }
];

const mockMembers: TierMember[] = [
  {
    id: "member-001",
    name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
    tier: "platinum",
    avatar: "–ê–ü",
    membershipId: "GTS-PLT-001",
    joinDate: "2022-03-15",
    totalSpent: 2850000,
    lastSeen: "–û–Ω–ª–∞–π–Ω",
    isOnline: true,
    mutualConnections: 12,
    commonInterests: ["—è—Ö—Ç—ã", "–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã", "gourmet"],
    connectionStatus: "connected"
  },
  {
    id: "member-002",
    name: "–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞",
    tier: "gold",
    avatar: "–ú–ö",
    membershipId: "GTS-GLD-047",
    joinDate: "2022-07-20",
    totalSpent: 1250000,
    lastSeen: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
    isOnline: false,
    mutualConnections: 8,
    commonInterests: ["—è—Ö—Ç—ã", "—Å–æ–±—ã—Ç–∏—è", "—Ñ–æ—Ç–æ"],
    connectionStatus: "connected"
  },
  {
    id: "member-004",
    name: "–ï–ª–µ–Ω–∞ –†–æ–º–∞–Ω–æ–≤–∞",
    tier: "bronze",
    avatar: "–ï–†",
    membershipId: "GTS-BRZ-256",
    joinDate: "2023-09-05",
    totalSpent: 185000,
    lastSeen: "–í—á–µ—Ä–∞",
    isOnline: false,
    mutualConnections: 3,
    commonInterests: ["–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö", "–ø—Ä–∏—Ä–æ–¥–∞"],
    connectionStatus: "none"
  }
];

const mockEvents: SocialEvent[] = [
  {
    id: "event-001",
    title: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ Gold+ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
    description: "–ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ Gold –∏ Platinum —É—Ä–æ–≤–Ω–µ–π —Å –¥–µ–≥—É—Å—Ç–∞—Ü–∏–µ–π –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –≤–∏–Ω –∏ networking",
    type: "exclusive",
    organizer: {
      name: "GTS Events Team",
      tier: "admin",
      avatar: "GTS"
    },
    date: "2024-12-20",
    time: "19:00",
    location: "–Ø—Ö—Ç-–∫–ª—É–± –°–æ—á–∏",
    maxAttendees: 30,
    currentAttendees: 18,
    attendees: ["member-001", "member-002"],
    tierRequirement: "gold",
    cost: 0,
    tags: ["networking", "wine", "exclusive"],
    images: ["event1.jpg"],
    isAttending: true,
    waitingList: 2
  },
  {
    id: "event-002",
    title: "–°–æ–≤–º–µ—Å—Ç–Ω–∞—è –º–æ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞",
    description: "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–µ —Å –±–∞—Ä–±–µ–∫—é –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏",
    type: "experience",
    organizer: {
      name: "–î–º–∏—Ç—Ä–∏–π –°–æ–∫–æ–ª–æ–≤",
      tier: "silver",
      avatar: "–î–°"
    },
    date: "2024-12-25",
    time: "11:00",
    location: "–ú–∞—Ä–∏–Ω–∞ –°–æ—á–∏",
    maxAttendees: 16,
    currentAttendees: 9,
    attendees: ["member-003", "member-004"],
    tierRequirement: "bronze",
    cost: 15000,
    tags: ["–º–æ—Ä–µ", "–∫–∞—Ç–∞–º–∞—Ä–∞–Ω", "–±–∞—Ä–±–µ–∫—é", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"],
    images: ["catamaran.jpg"],
    isAttending: false,
    waitingList: 0
  }
];

export function GTSSocialTierFeatures({ currentUser }: GTSSocialTierFeaturesProps) {
  const [activeTab, setActiveTab] = useState("feed");
  const [posts, setPosts] = useState<SocialPost[]>(mockPosts);
  const [newPostContent, setNewPostContent] = useState("");
  const [showNewPostDialog, setShowNewPostDialog] = useState(false);
  const [selectedPost, setSelectedPost] = useState<SocialPost | null>(null);
  const [showPostDetail, setShowPostDetail] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [tierFilter, setTierFilter] = useState("all");

  const getTierName = (tier: string) => {
    const names = {
      bronze: "–ë—Ä–æ–Ω–∑–∞",
      silver: "–°–µ—Ä–µ–±—Ä–æ",
      gold: "–ó–æ–ª–æ—Ç–æ", 
      platinum: "–ü–ª–∞—Ç–∏–Ω–∞"
    };
    return names[tier as keyof typeof names] || tier;
  };

  const getTierIcon = (tier: string) => {
    const icons = {
      bronze: Award,
      silver: Star,
      gold: Trophy,
      platinum: Crown
    };
    const IconComponent = icons[tier as keyof typeof icons] || Award;
    return <IconComponent className="h-4 w-4" style={{ color: tierColors[tier as keyof typeof tierColors]?.bg }} />;
  };

  const handleLikePost = (postId: string) => {
    setPosts(prev => prev.map(post => 
      post.id === postId 
        ? { 
            ...post, 
            likes: post.isLiked ? post.likes - 1 : post.likes + 1,
            isLiked: !post.isLiked 
          }
        : post
    ));
  };

  const handleBookmarkPost = (postId: string) => {
    setPosts(prev => prev.map(post => 
      post.id === postId 
        ? { ...post, isBookmarked: !post.isBookmarked }
        : post
    ));
  };

  const handleCreatePost = () => {
    if (newPostContent.trim()) {
      const newPost: SocialPost = {
        id: `post-${Date.now()}`,
        author: {
          id: currentUser.id,
          name: currentUser.name,
          tier: currentUser.tier,
          avatar: currentUser.avatar,
          membershipId: currentUser.membershipId
        },
        content: newPostContent,
        type: "text",
        createdAt: new Date().toISOString(),
        likes: 0,
        comments: 0,
        shares: 0,
        isLiked: false,
        isBookmarked: false,
        tags: [],
        visibility: "tier-only"
      };
      setPosts(prev => [newPost, ...prev]);
      setNewPostContent("");
      setShowNewPostDialog(false);
    }
  };

  const formatTimeAgo = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
    
    if (diffInHours < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffInHours < 24) return `${diffInHours}—á –Ω–∞–∑–∞–¥`;
    return `${Math.floor(diffInHours / 24)}–¥ –Ω–∞–∑–∞–¥`;
  };

  const filteredMembers = mockMembers.filter(member => {
    const matchesSearch = member.name.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesTier = tierFilter === "all" || member.tier === tierFilter;
    return matchesSearch && matchesTier;
  });

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(amount);
  };

  return (
    <div className="min-h-screen bg-[#0B0B0C] p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <Card className="bg-[#121214] border-[#232428] mb-6">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-heading text-white mb-2">
                  –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ClientClub
                </h1>
                <p className="text-[#A6A7AA]">
                  –û–±—â–µ–Ω–∏–µ –∏ networking –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {getTierName(currentUser.tier)} —É—Ä–æ–≤–Ω—è
                </p>
              </div>
              <div className="flex items-center gap-3">
                {getTierIcon(currentUser.tier)}
                <Badge 
                  style={{ 
                    backgroundColor: tierColors[currentUser.tier].bg, 
                    color: tierColors[currentUser.tier].text 
                  }}
                >
                  {getTierName(currentUser.tier)} Member
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Social Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-4 bg-[#121214] border-[#232428] mb-6">
            <TabsTrigger value="feed" className="data-[state=active]:bg-[#17181A] data-[state=active]:text-white">
              <MessageCircle className="h-4 w-4 mr-2" />
              –õ–µ–Ω—Ç–∞
            </TabsTrigger>
            <TabsTrigger value="members" className="data-[state=active]:bg-[#17181A] data-[state=active]:text-white">
              <Users className="h-4 w-4 mr-2" />
              –£—á–∞—Å—Ç–Ω–∏–∫–∏
            </TabsTrigger>
            <TabsTrigger value="events" className="data-[state=active]:bg-[#17181A] data-[state=active]:text-white">
              <Calendar className="h-4 w-4 mr-2" />
              –°–æ–±—ã—Ç–∏—è
            </TabsTrigger>
            <TabsTrigger value="groups" className="data-[state=active]:bg-[#17181A] data-[state=active]:text-white">
              <Sparkles className="h-4 w-4 mr-2" />
              –ì—Ä—É–ø–ø—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
            </TabsTrigger>
          </TabsList>

          {/* Social Feed Tab */}
          <TabsContent value="feed">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-2 space-y-6">
                {/* Create Post Card */}
                <Card className="bg-[#121214] border-[#232428]">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Avatar className="h-10 w-10">
                        <AvatarFallback className="bg-[#232428] text-white">
                          {currentUser.avatar}
                        </AvatarFallback>
                      </Avatar>
                      <div className="flex-1">
                        <Button
                          variant="outline"
                          className="w-full border-[#232428] text-[#A6A7AA] hover:bg-[#17181A] justify-start"
                          onClick={() => setShowNewPostDialog(true)}
                        >
                          –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º —Å {getTierName(currentUser.tier)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏...
                        </Button>
                      </div>
                    </div>
                    <div className="flex items-center gap-2 mt-3 pt-3 border-t border-[#232428]">
                      <Button size="sm" variant="ghost" className="text-[#A6A7AA] hover:text-white hover:bg-[#17181A]">
                        <Camera className="h-4 w-4 mr-2" />
                        –§–æ—Ç–æ
                      </Button>
                      <Button size="sm" variant="ghost" className="text-[#A6A7AA] hover:text-white hover:bg-[#17181A]">
                        <Video className="h-4 w-4 mr-2" />
                        –í–∏–¥–µ–æ
                      </Button>
                      <Button size="sm" variant="ghost" className="text-[#A6A7AA] hover:text-white hover:bg-[#17181A]">
                        <Star className="h-4 w-4 mr-2" />
                        –û—Ç–∑—ã–≤
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                {/* Posts Feed */}
                {posts.map(post => (
                  <Card key={post.id} className="bg-[#121214] border-[#232428]">
                    <CardContent className="p-4">
                      {/* Post Header */}
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-center gap-3">
                          <Avatar className="h-10 w-10">
                            <AvatarFallback className="bg-[#232428] text-white">
                              {post.author.avatar}
                            </AvatarFallback>
                          </Avatar>
                          <div>
                            <div className="flex items-center gap-2">
                              <h4 className="font-medium text-white">{post.author.name}</h4>
                              {getTierIcon(post.author.tier)}
                              <Badge 
                                className="text-xs"
                                style={{ 
                                  backgroundColor: tierColors[post.author.tier as keyof typeof tierColors]?.bg + '20',
                                  color: tierColors[post.author.tier as keyof typeof tierColors]?.bg 
                                }}
                              >
                                {getTierName(post.author.tier)}
                              </Badge>
                            </div>
                            <p className="text-xs text-[#A6A7AA]">
                              {formatTimeAgo(post.createdAt)} ‚Ä¢ {post.author.membershipId}
                            </p>
                          </div>
                        </div>
                        <Button variant="ghost" size="sm" className="text-[#A6A7AA] hover:text-white">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </div>

                      {/* Post Content */}
                      <div className="mb-4">
                        <p className="text-white mb-3">{post.content}</p>
                        
                        {/* Experience Data */}
                        {post.experienceData && (
                          <Card className="bg-[#17181A] border-[#232428]">
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between mb-2">
                                <h5 className="font-medium text-white">{post.experienceData.service}</h5>
                                <div className="flex items-center gap-1">
                                  {[...Array(5)].map((_, i) => (
                                    <Star 
                                      key={i} 
                                      className={`h-4 w-4 ${
                                        i < post.experienceData!.rating ? 'text-yellow-400 fill-current' : 'text-[#A6A7AA]'
                                      }`} 
                                    />
                                  ))}
                                </div>
                              </div>
                              <div className="grid grid-cols-2 gap-4 text-sm text-[#A6A7AA]">
                                <div className="flex items-center gap-1">
                                  <MapPin className="h-3 w-3" />
                                  {post.experienceData.location}
                                </div>
                                <div className="flex items-center gap-1">
                                  <Calendar className="h-3 w-3" />
                                  {post.experienceData.date}
                                </div>
                              </div>
                              <div className="text-right mt-2">
                                <span className="text-green-400 font-medium">
                                  {formatCurrency(post.experienceData.cost)}
                                </span>
                              </div>
                            </CardContent>
                          </Card>
                        )}

                        {/* Tags */}
                        {post.tags.length > 0 && (
                          <div className="flex flex-wrap gap-1 mt-3">
                            {post.tags.map((tag, index) => (
                              <Badge key={index} className="text-xs bg-[#232428] text-[#A6A7AA] hover:bg-[#2A2B30]">
                                #{tag}
                              </Badge>
                            ))}
                          </div>
                        )}
                      </div>

                      {/* Post Actions */}
                      <div className="flex items-center justify-between pt-3 border-t border-[#232428]">
                        <div className="flex items-center gap-4">
                          <Button
                            variant="ghost"
                            size="sm"
                            className={`${post.isLiked ? 'text-red-400' : 'text-[#A6A7AA]'} hover:text-red-400`}
                            onClick={() => handleLikePost(post.id)}
                          >
                            <Heart className={`h-4 w-4 mr-1 ${post.isLiked ? 'fill-current' : ''}`} />
                            {post.likes}
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="text-[#A6A7AA] hover:text-white"
                            onClick={() => {
                              setSelectedPost(post);
                              setShowPostDetail(true);
                            }}
                          >
                            <MessageSquareReply className="h-4 w-4 mr-1" />
                            {post.comments}
                          </Button>
                          <Button variant="ghost" size="sm" className="text-[#A6A7AA] hover:text-white">
                            <Share2 className="h-4 w-4 mr-1" />
                            {post.shares}
                          </Button>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          className={`${post.isBookmarked ? 'text-yellow-400' : 'text-[#A6A7AA]'} hover:text-yellow-400`}
                          onClick={() => handleBookmarkPost(post.id)}
                        >
                          <Bookmark className={`h-4 w-4 ${post.isBookmarked ? 'fill-current' : ''}`} />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>

              {/* Sidebar */}
              <div className="space-y-6">
                {/* Tier Statistics */}
                <Card className="bg-[#121214] border-[#232428]">
                  <CardHeader>
                    <CardTitle className="text-white text-sm">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω—è</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-[#A6A7AA]">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {getTierName(currentUser.tier)}:</span>
                      <span className="text-white">247</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-[#A6A7AA]">–û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å:</span>
                      <span className="text-green-400">34</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-[#A6A7AA]">–ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</span>
                      <span className="text-white">12</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-[#A6A7AA]">–°–æ–±—ã—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª–µ:</span>
                      <span className="text-blue-400">5</span>
                    </div>
                  </CardContent>
                </Card>

                {/* Trending Topics */}
                <Card className="bg-[#121214] border-[#232428]">
                  <CardHeader>
                    <CardTitle className="text-white text-sm">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    {['#—è—Ö—Ç—ã', '#–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã', '#—Ä–æ—Å–∫–æ—à—å', '#—Å–æ—á–∏', '#–æ—Ç–¥—ã—Ö'].map((tag, index) => (
                      <div key={index} className="flex items-center justify-between">
                        <span className="text-white text-sm">{tag}</span>
                        <span className="text-xs text-[#A6A7AA]">{Math.floor(Math.random() * 50) + 10} –ø–æ—Å—Ç–æ–≤</span>
                      </div>
                    ))}
                  </CardContent>
                </Card>

                {/* Quick Actions */}
                <Card className="bg-[#121214] border-[#232428]">
                  <CardHeader>
                    <CardTitle className="text-white text-sm">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <Button size="sm" className="w-full bg-[#91040C] hover:bg-[#91040C]/90">
                      <Plus className="h-4 w-4 mr-2" />
                      –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
                    </Button>
                    <Button size="sm" variant="outline" className="w-full border-[#232428] text-white hover:bg-[#17181A]">
                      <Users className="h-4 w-4 mr-2" />
                      –ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π
                    </Button>
                    <Button size="sm" variant="outline" className="w-full border-[#232428] text-white hover:bg-[#17181A]">
                      <Bell className="h-4 w-4 mr-2" />
                      –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    </Button>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          {/* Members Tab */}
          <TabsContent value="members">
            <div className="flex flex-col lg:flex-row gap-6">
              <div className="flex-1">
                <Card className="bg-[#121214] border-[#232428]">
                  <CardHeader className="pb-4">
                    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                      <CardTitle className="text-white">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è</CardTitle>
                      <div className="flex flex-col sm:flex-row gap-2">
                        <div className="relative">
                          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-[#A6A7AA]" />
                          <Input 
                            placeholder="–ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..." 
                            className="pl-10 bg-[#17181A] border-[#232428] text-white placeholder:text-[#A6A7AA] w-full sm:w-64"
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                          />
                        </div>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {filteredMembers.map(member => (
                        <Card key={member.id} className="bg-[#17181A] border-[#232428]">
                          <CardContent className="p-4">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center gap-4">
                                <div className="relative">
                                  <Avatar className="h-12 w-12">
                                    <AvatarFallback className="bg-[#232428] text-white">
                                      {member.avatar}
                                    </AvatarFallback>
                                  </Avatar>
                                  {member.isOnline && (
                                    <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-[#17181A]"></div>
                                  )}
                                </div>
                                <div>
                                  <div className="flex items-center gap-2">
                                    <h4 className="font-medium text-white">{member.name}</h4>
                                    {getTierIcon(member.tier)}
                                  </div>
                                  <p className="text-sm text-[#A6A7AA]">{member.membershipId}</p>
                                  <div className="flex items-center gap-4 text-xs text-[#A6A7AA] mt-1">
                                    <span>–£—á–∞—Å—Ç–Ω–∏–∫ —Å {new Date(member.joinDate).getFullYear()}</span>
                                    <span>{member.mutualConnections} –æ–±—â–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö</span>
                                  </div>
                                </div>
                              </div>
                              <div className="text-right">
                                <p className="text-sm text-[#A6A7AA] mb-2">{member.lastSeen}</p>
                                {member.connectionStatus === 'none' && (
                                  <Button size="sm" className="bg-blue-500 hover:bg-blue-600">
                                    <UserPlus className="h-4 w-4 mr-1" />
                                    –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                                  </Button>
                                )}
                                {member.connectionStatus === 'connected' && (
                                  <Button size="sm" variant="outline" className="border-green-500 text-green-400">
                                    <Users className="h-4 w-4 mr-1" />
                                    –ü–æ–¥–∫–ª—é—á–µ–Ω—ã
                                  </Button>
                                )}
                                {member.connectionStatus === 'requested' && (
                                  <Button size="sm" variant="outline" className="border-yellow-500 text-yellow-400">
                                    <Clock className="h-4 w-4 mr-1" />
                                    –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                                  </Button>
                                )}
                              </div>
                            </div>
                            {member.commonInterests.length > 0 && (
                              <div className="mt-3 pt-3 border-t border-[#232428]">
                                <p className="text-xs text-[#A6A7AA] mb-1">–û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:</p>
                                <div className="flex flex-wrap gap-1">
                                  {member.commonInterests.map((interest, index) => (
                                    <Badge key={index} className="text-xs bg-[#232428] text-[#A6A7AA]">
                                      {interest}
                                    </Badge>
                                  ))}
                                </div>
                              </div>
                            )}
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          {/* Events Tab */}
          <TabsContent value="events">
            <div className="space-y-6">
              {mockEvents.map(event => (
                <Card key={event.id} className="bg-[#121214] border-[#232428]">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <h3 className="text-xl font-heading text-white">{event.title}</h3>
                          <Badge 
                            className={`${
                              event.type === 'exclusive' ? 'bg-purple-500/10 text-purple-400' :
                              event.type === 'experience' ? 'bg-blue-500/10 text-blue-400' :
                              event.type === 'meetup' ? 'bg-green-500/10 text-green-400' :
                              'bg-yellow-500/10 text-yellow-400'
                            }`}
                          >
                            {event.type === 'exclusive' ? '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ' :
                             event.type === 'experience' ? '–û–ø—ã—Ç' :
                             event.type === 'meetup' ? '–í—Å—Ç—Ä–µ—á–∞' : '–ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ'}
                          </Badge>
                        </div>
                        <p className="text-[#A6A7AA] mb-3">{event.description}</p>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div className="flex items-center gap-2">
                            <Calendar className="h-4 w-4 text-[#A6A7AA]" />
                            <span className="text-white">{event.date} –≤ {event.time}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <MapPin className="h-4 w-4 text-[#A6A7AA]" />
                            <span className="text-white">{event.location}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <Users className="h-4 w-4 text-[#A6A7AA]" />
                            <span className="text-white">{event.currentAttendees}/{event.maxAttendees} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                          </div>
                          <div className="flex items-center gap-2">
                            {getTierIcon(event.tierRequirement)}
                            <span className="text-white">{getTierName(event.tierRequirement)}+</span>
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        {event.cost > 0 ? (
                          <p className="text-lg font-heading text-white mb-2">{formatCurrency(event.cost)}</p>
                        ) : (
                          <p className="text-lg font-heading text-green-400 mb-2">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</p>
                        )}
                        {event.isAttending ? (
                          <Button className="bg-green-500 hover:bg-green-600">
                            <CheckCircle className="h-4 w-4 mr-2" />
                            –£—á–∞—Å—Ç–≤—É—é
                          </Button>
                        ) : event.currentAttendees >= event.maxAttendees ? (
                          <Button variant="outline" className="border-yellow-500 text-yellow-400">
                            <Clock className="h-4 w-4 mr-2" />
                            –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
                          </Button>
                        ) : (
                          <Button className="bg-[#91040C] hover:bg-[#91040C]/90">
                            <Plus className="h-4 w-4 mr-2" />
                            –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                          </Button>
                        )}
                      </div>
                    </div>
                    
                    {event.tags.length > 0 && (
                      <div className="flex flex-wrap gap-1">
                        {event.tags.map((tag, index) => (
                          <Badge key={index} className="text-xs bg-[#232428] text-[#A6A7AA]">
                            #{tag}
                          </Badge>
                        ))}
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Interest Groups Tab */}
          <TabsContent value="groups">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[
                { name: '–õ—é–±–∏—Ç–µ–ª–∏ —è—Ö—Ç', members: 89, posts: 156, icon: '‚õµ', color: 'bg-blue-500' },
                { name: 'VIP –∞–≤—Ç–æ–º–æ–±–∏–ª–∏', members: 67, posts: 134, icon: 'üèéÔ∏è', color: 'bg-red-500' },
                { name: '–í–µ—Ä—Ç–æ–ª–µ—Ç–Ω—ã–µ —Ç—É—Ä—ã', members: 45, posts: 89, icon: 'üöÅ', color: 'bg-green-500' },
                { name: '–ì—É—Ä–º–∞–Ω—ã', members: 123, posts: 234, icon: 'üç∑', color: 'bg-purple-500' },
                { name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', members: 78, posts: 345, icon: 'üì∏', color: 'bg-yellow-500' },
                { name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', members: 156, posts: 456, icon: '‚úàÔ∏è', color: 'bg-indigo-500' }
              ].map((group, index) => (
                <Card key={index} className="bg-[#121214] border-[#232428]">
                  <CardContent className="p-6">
                    <div className="text-center">
                      <div className={`w-16 h-16 rounded-full ${group.color} flex items-center justify-center mx-auto mb-3`}>
                        <span className="text-2xl">{group.icon}</span>
                      </div>
                      <h3 className="font-heading text-white mb-2">{group.name}</h3>
                      <div className="flex items-center justify-center gap-4 text-sm text-[#A6A7AA] mb-4">
                        <span>{group.members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                        <span>{group.posts} –ø–æ—Å—Ç–æ–≤</span>
                      </div>
                      <Button size="sm" className="bg-[#91040C] hover:bg-[#91040C]/90">
                        –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>

      {/* New Post Dialog */}
      <Dialog open={showNewPostDialog} onOpenChange={setShowNewPostDialog}>
        <DialogContent className="bg-[#0B0B0C] border-[#232428] text-white max-w-lg">
          <DialogHeader>
            <DialogTitle className="text-white">–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</DialogTitle>
            <DialogDescription className="text-[#A6A7AA]">
              –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ {getTierName(currentUser.tier)} —É—Ä–æ–≤–Ω—è
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <Textarea
              placeholder="–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å?"
              value={newPostContent}
              onChange={(e) => setNewPostContent(e.target.value)}
              className="bg-[#17181A] border-[#232428] text-white placeholder:text-[#A6A7AA] min-h-[120px]"
            />
            <div className="flex gap-2">
              <Button 
                variant="outline" 
                onClick={() => setShowNewPostDialog(false)}
                className="border-[#232428] text-white hover:bg-[#17181A]"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button onClick={handleCreatePost} className="bg-[#91040C] hover:bg-[#91040C]/90">
                <Send className="h-4 w-4 mr-2" />
                –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}