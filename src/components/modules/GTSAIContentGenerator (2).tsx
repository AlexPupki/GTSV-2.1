import { useState } from "react";
import { Card } from "../ui/card";
import { Badge } from "../ui/badge";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { Textarea } from "../ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../ui/tabs";
import { Separator } from "../ui/separator";
import { 
  Wand2, 
  Copy, 
  Download, 
  Eye, 
  Sparkles, 
  FileText, 
  Image, 
  Hash,
  RefreshCw,
  CheckCircle,
  Settings,
  Zap,
  Target,
  Users,
  Camera,
  MapPin,
  Clock,
  DollarSign,
  Star
} from "lucide-react";

interface ContentTemplate {
  id: string;
  name: string;
  category: string;
  description: string;
  fields: string[];
  example: string;
}

interface GeneratedContent {
  title: string;
  description: string;
  shortDescription: string;
  hashtags: string[];
  seoKeywords: string[];
  socialMedia: {
    instagram: string;
    telegram: string;
    vk: string;
  };
  targetAudience: string;
  callToAction: string;
}

export function GTSAIContentGenerator() {
  const [selectedTemplate, setSelectedTemplate] = useState<ContentTemplate | null>(null);
  const [formData, setFormData] = useState<Record<string, string>>({});
  const [generatedContent, setGeneratedContent] = useState<GeneratedContent | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedTab, setSelectedTab] = useState("service");

  const serviceTemplates: ContentTemplate[] = [
    {
      id: "yacht-tour",
      name: "–Ø—Ö—Ç-—Ç—É—Ä",
      category: "–í–æ–¥–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —è—Ö—Ç–µ–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∏ –º–æ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—É–ª–æ–∫",
      fields: ["–¢–∏–ø —è—Ö—Ç—ã", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ú–∞—Ä—à—Ä—É—Ç", "–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏", "–ú–∞–∫—Å–∏–º—É–º –≥–æ—Å—Ç–µ–π"],
      example: "–†–æ—Å–∫–æ—à–Ω–∞—è —è—Ö—Ç–∞ Azimut –¥–ª—è –º–æ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ –ø–æ–±–µ—Ä–µ–∂—å—é –°–æ—á–∏"
    },
    {
      id: "atv-adventure",
      name: "ATV –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ",
      category: "–ù–∞–∑–µ–º–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
      description: "–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª–µ—Ç–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∏ off-road –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π",
      fields: ["–ú–æ–¥–µ–ª—å ATV", "–°–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–õ–∞–Ω–¥—à–∞—Ñ—Ç", "–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"],
      example: "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç—É—Ä –Ω–∞ –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª–∞—Ö Can-Am –ø–æ –≥–æ—Ä–Ω—ã–º —Ç—Ä–æ–ø–∞–º –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω—ã"
    },
    {
      id: "helicopter-tour",
      name: "–í–µ—Ä—Ç–æ–ª–µ—Ç–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è",
      category: "–í–æ–∑–¥—É—à–Ω—ã–µ —Ç—É—Ä—ã",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–µ—Ä—Ç–æ–ª–µ—Ç–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π",
      fields: ["–¢–∏–ø –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞", "–í—ã—Å–æ—Ç–∞ –ø–æ–ª–µ—Ç–∞", "–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–í—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞", "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"],
      example: "–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–π –ø–æ–ª–µ—Ç –Ω–∞ Robinson R44 –Ω–∞–¥ –û–ª–∏–º–ø–∏–π—Å–∫–∏–º –ø–∞—Ä–∫–æ–º"
    }
  ];

  const equipmentTemplates: ContentTemplate[] = [
    {
      id: "jetski",
      name: "–ì–∏–¥—Ä–æ—Ü–∏–∫–ª",
      category: "–í–æ–¥–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
      description: "–û–ø–∏—Å–∞–Ω–∏–µ –≥–∏–¥—Ä–æ—Ü–∏–∫–ª–æ–≤ –¥–ª—è –∞—Ä–µ–Ω–¥—ã",
      fields: ["–ú–æ–¥–µ–ª—å", "–ú–æ—â–Ω–æ—Å—Ç—å", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", "–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"],
      example: "Yamaha WaveRunner VX Cruiser –¥–ª—è –≤–æ–¥–Ω—ã—Ö —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π"
    },
    {
      id: "snowmobile",
      name: "–°–Ω–µ–≥–æ—Ö–æ–¥",
      category: "–ó–∏–º–Ω—è—è —Ç–µ—Ö–Ω–∏–∫–∞", 
      description: "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–Ω–µ–≥–æ—Ö–æ–¥–æ–≤ –∏ –∑–∏–º–Ω–∏—Ö —Ç—É—Ä–æ–≤",
      fields: ["–ú–æ–¥–µ–ª—å", "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è", "–ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å", "–ö–æ–º—Ñ–æ—Ä—Ç", "–ó–∏–º–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"],
      example: "Ski-Doo Summit –¥–ª—è –≥–æ—Ä–Ω—ã—Ö –∑–∏–º–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"
    }
  ];

  const mockGeneration = (): GeneratedContent => {
    const templates = {
      title: `${formData.name || '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —É—Å–ª—É–≥–∞'} - –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –æ–ø—ã—Ç —Å GTS`,
      description: `–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Å ${formData.name || '–Ω–∞—à–µ–π —É—Å–ª—É–≥–æ–π'}. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥–∏–¥—ã, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏ —Å–æ–∑–¥–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –∫–æ–º—Ñ–æ—Ä—Ç –∏ —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã.`,
      shortDescription: `${formData.name || '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —É—Å–ª—É–≥–∞'} —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º`,
      hashtags: [
        "#GTSSochi", "#PremiumTours", "#SochiAdventure", "#LuxuryTravel", 
        "#ExtremeRussia", "#BlackSeaTours", "#MountainAdventure"
      ],
      seoKeywords: [
        "–∞—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∏ —Å–æ—á–∏", "—Ç—É—Ä—ã —Å–æ—á–∏", "–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö", 
        "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç—É—Ä–∏–∑–º", "–ø—Ä–µ–º–∏—É–º —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
      ],
      socialMedia: {
        instagram: `üåä ${formData.name || '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ'} –∂–¥–µ—Ç –≤–∞—Å! \n‚ú® –ü—Ä–µ–º–∏—É–º —Å–µ—Ä–≤–∏—Å –æ—Ç @gts_sochi \nüìç –°–æ—á–∏, –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞ \n#GTSSochi #AdventureTime`,
        telegram: `üöÅ –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º? \n\n${formData.name || '–ù–∞—à–∞ —É—Å–ª—É–≥–∞'} - —ç—Ç–æ:\nüî• –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n‚ö° –û–ø—ã—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã\nüéØ 100% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n–ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`,
        vk: `üèîÔ∏è ${formData.name || '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ'} –≤ –°–æ—á–∏!\n\n–ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ GTS –æ–±–µ—Å–ø–µ—á–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ —ç–º–æ—Ü–∏–∏.`
      },
      targetAudience: "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ 25-45 –ª–µ—Ç, —Ü–µ–Ω—è—â–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ –Ω–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è",
      callToAction: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 15% –Ω–∞ –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!"
    };
    return templates;
  };

  const handleGenerate = async () => {
    setIsGenerating(true);
    // –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞
    setTimeout(() => {
      setGeneratedContent(mockGeneration());
      setIsGenerating(false);
    }, 2000);
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleFormChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const currentTemplates = selectedTab === "service" ? serviceTemplates : equipmentTemplates;

  return (
    <div className="p-6 bg-[#0B0B0C] min-h-screen">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-semibold text-white mb-2">AI Content Generator</h1>
            <p className="text-[#A6A7AA]">–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É—Å–ª—É–≥ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
          </div>
          <div className="flex items-center gap-2">
            <Badge className="bg-green-500/20 text-green-400">
              <Sparkles className="w-3 h-3 mr-1" />
              AI Powered
            </Badge>
          </div>
        </div>

        <Tabs value={selectedTab} onValueChange={setSelectedTab} className="w-full">
          <TabsList className="grid w-full grid-cols-2 bg-[#121214] border-[#232428]">
            <TabsTrigger 
              value="service" 
              className="data-[state=active]:bg-[#91040C] data-[state=active]:text-white text-[#A6A7AA]"
            >
              <Target className="w-4 h-4 mr-2" />
              –£—Å–ª—É–≥–∏ –∏ —Ç—É—Ä—ã
            </TabsTrigger>
            <TabsTrigger 
              value="equipment" 
              className="data-[state=active]:bg-[#91040C] data-[state=active]:text-white text-[#A6A7AA]"
            >
              <Settings className="w-4 h-4 mr-2" />
              –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
            </TabsTrigger>
          </TabsList>

          <TabsContent value={selectedTab} className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Template Selection & Form */}
              <div className="space-y-6">
                {/* Templates */}
                <Card className="bg-[#121214] border-[#232428] p-6">
                  <h3 className="text-white font-semibold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω</h3>
                  <div className="space-y-3">
                    {currentTemplates.map((template) => (
                      <div
                        key={template.id}
                        className={`p-4 rounded-lg cursor-pointer transition-colors ${
                          selectedTemplate?.id === template.id ? 'bg-[#91040C]/20 border border-[#91040C]' : 'bg-[#17181A] hover:bg-[#232428]'
                        }`}
                        onClick={() => setSelectedTemplate(template)}
                      >
                        <div className="flex justify-between items-start mb-2">
                          <h4 className="text-white font-medium">{template.name}</h4>
                          <Badge variant="outline" className="border-[#232428] text-[#A6A7AA]">
                            {template.category}
                          </Badge>
                        </div>
                        <p className="text-[#A6A7AA] text-sm mb-2">{template.description}</p>
                        <p className="text-[#A6A7AA] text-xs italic">{template.example}</p>
                      </div>
                    ))}
                  </div>
                </Card>

                {/* Form */}
                {selectedTemplate && (
                  <Card className="bg-[#121214] border-[#232428] p-6">
                    <h3 className="text-white font-semibold mb-4">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
                    <div className="space-y-4">
                      <div>
                        <label className="text-white text-sm font-medium mb-2 block">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                        <Input
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏/–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
                          value={formData.name || ""}
                          onChange={(e) => handleFormChange("name", e.target.value)}
                          className="bg-[#17181A] border-[#232428] text-white"
                        />
                      </div>

                      {selectedTemplate.fields.map((field) => (
                        <div key={field}>
                          <label className="text-white text-sm font-medium mb-2 block">{field}</label>
                          <Input
                            placeholder={`–í–≤–µ–¥–∏—Ç–µ ${field.toLowerCase()}`}
                            value={formData[field] || ""}
                            onChange={(e) => handleFormChange(field, e.target.value)}
                            className="bg-[#17181A] border-[#232428] text-white"
                          />
                        </div>
                      ))}

                      <div>
                        <label className="text-white text-sm font-medium mb-2 block">–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</label>
                        <Select onValueChange={(value) => handleFormChange("audience", value)}>
                          <SelectTrigger className="bg-[#17181A] border-[#232428] text-white">
                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é" />
                          </SelectTrigger>
                          <SelectContent className="bg-[#17181A] border-[#232428]">
                            <SelectItem value="families">–°–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏</SelectItem>
                            <SelectItem value="young-adults">–ú–æ–ª–æ–¥–µ–∂—å 18-30</SelectItem>
                            <SelectItem value="professionals">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã 30-45</SelectItem>
                            <SelectItem value="luxury">–ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç</SelectItem>
                            <SelectItem value="extreme">–≠–∫—Å—Ç—Ä–µ–º–∞–ª—ã</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <label className="text-white text-sm font-medium mb-2 block">–¢–æ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞</label>
                        <Select onValueChange={(value) => handleFormChange("tone", value)}>
                          <SelectTrigger className="bg-[#17181A] border-[#232428] text-white">
                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω" />
                          </SelectTrigger>
                          <SelectContent className="bg-[#17181A] border-[#232428]">
                            <SelectItem value="professional">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π</SelectItem>
                            <SelectItem value="friendly">–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π</SelectItem>
                            <SelectItem value="exciting">–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π</SelectItem>
                            <SelectItem value="luxury">–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π</SelectItem>
                            <SelectItem value="casual">–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <Button 
                        onClick={handleGenerate}
                        disabled={isGenerating || !formData.name}
                        className="w-full bg-[#91040C] hover:bg-[#91040C]/80"
                      >
                        {isGenerating ? (
                          <>
                            <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                            –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...
                          </>
                        ) : (
                          <>
                            <Wand2 className="w-4 h-4 mr-2" />
                            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                          </>
                        )}
                      </Button>
                    </div>
                  </Card>
                )}
              </div>

              {/* Generated Content */}
              <div className="space-y-6">
                {generatedContent && (
                  <>
                    {/* Main Description */}
                    <Card className="bg-[#121214] border-[#232428] p-6">
                      <div className="flex justify-between items-center mb-4">
                        <h3 className="text-white font-semibold">–û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</h3>
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => handleCopy(generatedContent.description)}
                          className="border-[#232428] text-[#A6A7AA] hover:bg-[#232428]"
                        >
                          <Copy className="w-4 h-4" />
                        </Button>
                      </div>
                      
                      <div className="space-y-4">
                        <div>
                          <h4 className="text-white font-medium mb-2">{generatedContent.title}</h4>
                          <p className="text-[#A6A7AA]">{generatedContent.description}</p>
                        </div>
                        
                        <Separator className="bg-[#232428]" />
                        
                        <div>
                          <h5 className="text-white font-medium mb-2">–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</h5>
                          <p className="text-[#A6A7AA] text-sm">{generatedContent.shortDescription}</p>
                        </div>
                      </div>
                    </Card>

                    {/* SEO & Hashtags */}
                    <Card className="bg-[#121214] border-[#232428] p-6">
                      <h3 className="text-white font-semibold mb-4">SEO –∏ —Ö–µ—à—Ç–µ–≥–∏</h3>
                      
                      <div className="space-y-4">
                        <div>
                          <div className="flex justify-between items-center mb-2">
                            <h5 className="text-white font-medium">–•–µ—à—Ç–µ–≥–∏</h5>
                            <Button 
                              size="sm" 
                              variant="outline"
                              onClick={() => handleCopy(generatedContent.hashtags.join(" "))}
                              className="border-[#232428] text-[#A6A7AA] hover:bg-[#232428]"
                            >
                              <Copy className="w-4 h-4" />
                            </Button>
                          </div>
                          <div className="flex flex-wrap gap-2">
                            {generatedContent.hashtags.map((tag, index) => (
                              <Badge key={index} variant="outline" className="border-[#232428] text-blue-400">
                                <Hash className="w-3 h-3 mr-1" />
                                {tag.replace('#', '')}
                              </Badge>
                            ))}
                          </div>
                        </div>
                        
                        <div>
                          <div className="flex justify-between items-center mb-2">
                            <h5 className="text-white font-medium">SEO –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</h5>
                            <Button 
                              size="sm" 
                              variant="outline"
                              onClick={() => handleCopy(generatedContent.seoKeywords.join(", "))}
                              className="border-[#232428] text-[#A6A7AA] hover:bg-[#232428]"
                            >
                              <Copy className="w-4 h-4" />
                            </Button>
                          </div>
                          <div className="flex flex-wrap gap-2">
                            {generatedContent.seoKeywords.map((keyword, index) => (
                              <Badge key={index} variant="outline" className="border-[#232428] text-green-400">
                                {keyword}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </div>
                    </Card>

                    {/* Social Media */}
                    <Card className="bg-[#121214] border-[#232428] p-6">
                      <h3 className="text-white font-semibold mb-4">–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π</h3>
                      
                      <div className="space-y-4">
                        {Object.entries(generatedContent.socialMedia).map(([platform, content]) => (
                          <div key={platform} className="bg-[#17181A] p-4 rounded-lg">
                            <div className="flex justify-between items-center mb-2">
                              <h5 className="text-white font-medium capitalize">{platform}</h5>
                              <Button 
                                size="sm" 
                                variant="outline"
                                onClick={() => handleCopy(content)}
                                className="border-[#232428] text-[#A6A7AA] hover:bg-[#232428]"
                              >
                                <Copy className="w-4 h-4" />
                              </Button>
                            </div>
                            <p className="text-[#A6A7AA] text-sm whitespace-pre-line">{content}</p>
                          </div>
                        ))}
                      </div>
                    </Card>

                    {/* Additional Info */}
                    <Card className="bg-[#121214] border-[#232428] p-6">
                      <h3 className="text-white font-semibold mb-4">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                      
                      <div className="space-y-4">
                        <div>
                          <h5 className="text-white font-medium mb-2 flex items-center">
                            <Users className="w-4 h-4 mr-2" />
                            –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
                          </h5>
                          <p className="text-[#A6A7AA] text-sm">{generatedContent.targetAudience}</p>
                        </div>
                        
                        <div>
                          <h5 className="text-white font-medium mb-2 flex items-center">
                            <Zap className="w-4 h-4 mr-2" />
                            Call to Action
                          </h5>
                          <p className="text-[#A6A7AA] text-sm">{generatedContent.callToAction}</p>
                        </div>
                      </div>
                    </Card>
                  </>
                )}
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}